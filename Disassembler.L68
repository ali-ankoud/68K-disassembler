00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/3/2023 9:56:12 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler Snippet
00000000                             3  * Written by : ARM Cortex Companions
00000000                             4  * Date       : 5/15/2023
00000000                             5  * Description: Ben Schipunov contribution to the disassembler
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  STARTER
00001000                             9          ORG     $1000       *Start at $1000
00001000                            10          
00001000                            11  *-------------------------------------------------------------------------------------------------- 
00001000                            12         
00001000                            13  START                       *START: Start code
00001000  6400 0002                 14          BCC     TEST
00001004                            15  TEST
00001004                            16  
00001004  43F9 00001F56             17          LEA     INTRO,A1    *Intro text
0000100A  103C 000E                 18          MOVE.B  #14,D0
0000100E  4E4F                      19          TRAP    #15
00001010                            20          
00001010  43F9 00001FDE             21          LEA     ASTART,A1   *Input prompt text #1
00001016  4E4F                      22          TRAP    #15
00001018                            23  
00001018  103C 0002                 24          MOVE.B  #2,D0       *String prompt #1
0000101C  4E4F                      25          TRAP    #15
0000101E                            26          
0000101E  B27C 0008                 27          CMP.W   #8,D1       *Throw error if length is greater than 8 (length stored in D1)
00001022  6E00 00B2                 28          BGT     VERR3
00001026                            29          
00001026  4EB9 00001054             30          JSR     PARSE       *Parse string #1
0000102C                            31          
0000102C                            32  
0000102C  2641                      33          MOVE.L  D1,A3
0000102E                            34          
0000102E  43F9 00001FF5             35          LEA     AEND,A1     *Input prompt text #2
00001034  103C 000E                 36          MOVE.B  #14,D0
00001038  4E4F                      37          TRAP    #15
0000103A                            38          
0000103A  103C 0002                 39          MOVE.B  #2,D0       *String prompt #2
0000103E  4E4F                      40          TRAP    #15
00001040                            41          
00001040  B27C 0008                 42          CMP.W   #8,D1       *Throw error if length is greater than 8 (length stored in D1)
00001044  6E00 0090                 43          BGT     VERR3
00001048                            44          
00001048  4EB9 00001054             45          JSR     PARSE       *Parse string #2
0000104E                            46          
0000104E  2841                      47          MOVE.L  D1,A4
00001050                            48          
00001050  6000 005A                 49          BRA     VINPUT      *Verify inputs
00001054                            50          
00001054                            51  *--------------------------------------------------------------------------------------------------
00001054                            52  
00001054                            53  PARSE                       *PARSE: Initialize variables involved in parsing
00001054  123C 0000                 54          MOVE.B  #0,D1       * [D1] parse output
00001058  143C 0008                 55          MOVE.B  #8,D2       * [D2] max letter counter (size of longword)
0000105C                            56          
0000105C                            57  PSTEP                       *PSTEP: Step in parsing for loop
0000105C  1019                      58          MOVE.B  (A1)+,D0    *Read next byte from A1
0000105E  B03C 0000                 59          CMP.B   #0,D0       *Check if reached end of string input
00001062  6700 0046                 60          BEQ     PDONE       *Break the for loop if reached end
00001066  E989                      61          LSL.L   #4,D1       *Logical shift left by 4 bits to insert next hex character
00001068  B03C 003A                 62          CMP.B   #58,D0      *Distinguish between letter and number
0000106C  6D00 001A                 63          BLT     PNUM        *Handle number
00001070                            64  
00001070  0400 0037                 65  PHEX    SUBI.B   #55,D0     *ASCII value subtracted by 55 to match hex value
00001074  0C00 000F                 66          CMPI.B   #15,D0     *Check if ASCII is high for lowercase values
00001078  6E00 0006                 67          BGT     PCAPS       *Handle lowercase
0000107C  6000 000E                 68          BRA     PSTEP2
00001080                            69       
00001080  0400 0020                 70  PCAPS   SUBI.B   #32,D0     *32 is difference between uppercase and lowercase ASCII
00001084  6000 0006                 71          BRA     PSTEP2
00001088                            72  
00001088  0400 0030                 73  PNUM    SUB.B   #48,D0      *ASCII value subtracted by 48 to match hex value
0000108C                            74          
0000108C  0C00 000F                 75  PSTEP2  CMPI.B   #15,D0     *If D0 is not in between 0 and 15 inclusively, throw an error
00001090  6E00 0034                 76          BGT     VERR2
00001094  0C00 0000                 77          CMPI.B   #0,D0
00001098  6D00 002C                 78          BLT     VERR2
0000109C  D280                      79          ADD.L   D0,D1       *Append hex char to parse output
0000109E  5302                      80          SUBQ.B  #1,D2       *Decrement the counter
000010A0  0C02 0000                 81          CMPI.B   #0,D2      *Compare if we reached max count
000010A4  6700 0004                 82          BEQ     PDONE       *Complete parsing
000010A8  60B2                      83          BRA     PSTEP       *Or else continue loop
000010AA                            84  
000010AA  4E75                      85  PDONE   RTS
000010AC                            86  
000010AC                            87  *--------------------------------------------------------------------------------------------------
000010AC                            88  
000010AC  B9CB                      89  VINPUT  CMP.L   A3,A4       *Verify input from parsing
000010AE  6D00 0006                 90          BLT     VERR1
000010B2  6000 0032                 91          BRA     READLN
000010B6                            92  
000010B6  43F9 0000200C             93  VERR1   LEA     VERR1M,A1   *Throw parsing error
000010BC  103C 000E                 94          MOVE.B  #14,D0
000010C0  4E4F                      95          TRAP    #15
000010C2  6000 0E8C                 96          BRA     END
000010C6                            97  
000010C6  43F9 00002046             98  VERR2   LEA     VERR2M,A1   *Throw range error
000010CC  103C 000E                 99          MOVE.B  #14,D0
000010D0  4E4F                     100          TRAP    #15
000010D2  6000 0E7C                101          BRA     END
000010D6                           102  
000010D6  43F9 0000206C            103  VERR3   LEA     VERR3M,A1   *Throw length error
000010DC  103C 000E                104          MOVE.B  #14,D0
000010E0  4E4F                     105          TRAP    #15
000010E2  6000 0E6C                106          BRA     END
000010E6                           107          
000010E6                           108  *--------------------------------------------------------------------------------------------------
000010E6                           109  
000010E6                           110  READLN                              *READLN: Start READLN for loop
000010E6  244B                     111          MOVE.L  A3,A2               *Set current address to start address
000010E8  1A3C 0000                112          MOVE.B  #0,D5               * [D5] Initialize counter to 32 (# lines to pause the screen)
000010EC                           113  
000010EC                           114  RSTEP                               *RSTEP: 
000010EC  381A                     115          MOVE.W  (A2)+,D4
000010EE  340A                     116          MOVE.W  A2,D2
000010F0  5542                     117          SUBQ.W  #2,D2
000010F2                           118          
000010F2  48E7 0400                119          MOVEM.L D5,-(SP)
000010F6  1A3C 0000                120          MOVE.B  #0,D5
000010FA  4EB9 00001148            121          JSR     HEXOUT              *Run printing operation for HEX address
00001100  4CDF 0020                122          MOVEM.L (SP)+,D5
00001104                           123          
00001104  43F9 000020A7            124          LEA     SM2,A1              *Horizontal tab indent after printing hex
0000110A  103C 000E                125          MOVE.B  #14,D0
0000110E  4E4F                     126          TRAP    #15
00001110                           127          
00001110  48E7 7F0F                128          MOVEM.L A4-A7/D1-D7,-(SP)   *Store data to stack
00001114  4EB9 0000133A            129          JSR     DISASM              *Run disassembly for current machine code
0000111A  4CDF F0FE                130          MOVEM.L (SP)+,A4-A7/D1-D7   *Recall data from stack
0000111E                           131          
0000111E  5205                     132          ADDQ.B  #1,D5       *Increment counter by 1
00001120  BA3C 0020                133          CMP.B   #32,D5      *Check if we reached 32 lines
00001124  6700 0016                134          BEQ     RPAUSE      *Branch to pausing code
00001128                           135          
00001128  43F9 000020A0            136          LEA     LB,A1       *Print line break
0000112E  103C 000E                137          MOVE.B  #14,D0      
00001132  4E4F                     138          TRAP    #15
00001134                           139          
00001134                           140  RCONT                       *RCONT: Used to continue off of the RPAUSE label after a pause in the printing
00001134  B9CA                     141          CMP.L   A2,A4       *Check if we reached the end address
00001136  6D00 0E18                142          BLT     END         *End loop if so
0000113A  60B0                     143          BRA     RSTEP       *Or else continue the loop
0000113C                           144          
0000113C                           145  RPAUSE                      *RPAUSE: Used to pause printing at the end of the screen and wait for ENTER to be pressed
0000113C  1A3C 0000                146          MOVE.B  #0,D5       * Reset D5 counter
00001140  103C 0005                147          MOVE.B  #5,D0       * [D0] Trap task #5: Character prompt
00001144  4E4F                     148          TRAP    #15         * Only used for waiting for user to hit ENTER
00001146  60EC                     149          BRA     RCONT       *Continue with READLN loop
00001148                           150  
00001148                           151  *--------------------------------------------------------------------------------------------------
00001148                           152  
00001148                           153  HEXOUT                      *HEXOUT: Prints a value in hexadecimal
00001148  103C 0006                154          MOVE.B  #6,D0       * [D0] Trap task #6: Print character (will apply to all trap operations involved)
0000114C  163C 0008                155          MOVE.B  #8,D3       * [D3] Decrementing counter to keep track length of longword
00001150                           156          
00001150                           157  HSTEP                       *HSTEP: An iteration in the HEXOUT for loop
00001150  E99A                     158          ROL.L   #4,D2       *Rotational shift left by 4 bits to bring the first hex character to the other side
00001152  2202                     159          MOVE.L  D2,D1       * [D1] Used for the AND operation to filter to the right four bits
00001154  0281 0000000F            160          ANDI.L  #$F,D1      * Filter to the right four bits
0000115A  B23C 000A                161          CMP.B   #10,D1      *Distinguish between number and letter
0000115E  6D00 000A                162          BLT     HNUM        *Branch to number handling, or continue to letter handling
00001162                           163          
00001162                           164  HHEX                        *HHEX: Handle letters from HEXOUT for loop
00001162  0601 0037                165          ADDI.B  #55,D1      *Increment decimal value by 55 to match corresponding ASCII
00001166  6000 0006                166          BRA     HSTEP2      *Branch to step 2 of the iteration
0000116A                           167  
0000116A                           168  HNUM                        *HNUM: Handle numbers from HEXOUT for loop
0000116A  0601 0030                169          ADDI.B  #48,D1      *Increment decimal value by 55 to match corresponding ASCII
0000116E                           170  
0000116E                           171  HSTEP2                      *HSTEP2: 2nd part of an iteration from the HEXOUT for loop
0000116E  5303                     172          SUBQ.B  #1,D3       *Decrement counter for longword tracking
00001170                           173          
00001170  B205                     174          CMP.B   D5,D1
00001172  6700 0004                175          BEQ     HSKIP2
00001176                           176          
00001176  4E4F                     177          TRAP #15            *Will print the ASCII value stored in D1
00001178  0C03 0000                178  HSKIP2  CMPI.B  #0,D3       *Check if we reached 8 characters for a longword
0000117C  6700 0010                179          BEQ     HDONE       *End loop if done
00001180                           180          
00001180  B23C 0030                181          CMP.B   #48,D1
00001184  6700 0006                182          BEQ     HSKIP3
00001188                           183          
00001188  1A3C 0000                184          MOVE.B  #0,D5
0000118C                           185          
0000118C  60C2                     186  HSKIP3  BRA     HSTEP       *Or else continue loop
0000118E                           187          
0000118E  4E75                     188  HDONE   RTS
00001190                           189  
00001190                           190  
00001190                           191  *--------------------------------------------------------------------------------------------------
00001190                           192  
00001190  103C 000E                193  SIZE    MOVE.B  #14,D0
00001194  BA3C 0000                194          CMP.B   #%00,D5
00001198  6700 001E                195          BEQ     SIZEB
0000119C  BA3C 0001                196          CMP.B   #%01,D5
000011A0  6700 0020                197          BEQ     SIZEW
000011A4  BA3C 0002                198          CMP.B   #%10,D5
000011A8  6700 0022                199          BEQ     SIZEL
000011AC  BA3C 0003                200          CMP.B   #%11,D5
000011B0  6700 0010                201          BEQ     SIZEW       *Assume WORD type on memory pointer things
000011B4  6000 0022                202          BRA     SRET
000011B8                           203          
000011B8  43F9 000020D6            204  SIZEB   LEA     MODEB,A1
000011BE  6000 0016                205          BRA     SDONE
000011C2                           206  
000011C2  43F9 000020D9            207  SIZEW   LEA     MODEW,A1
000011C8  6000 000C                208          BRA     SDONE
000011CC                           209  
000011CC  43F9 000020DC            210  SIZEL   LEA     MODEL,A1
000011D2  6000 0002                211          BRA     SDONE
000011D6                           212  
000011D6  4E4F                     213  SDONE   TRAP    #15
000011D8                           214  
000011D8  4E75                     215  SRET    RTS
000011DA                           216  
000011DA                           217  *-----------------------------------------------------------------------------------
000011DA                           218  *using values in d3 (mode), d6 (register), and d5 (size) prints address mode
000011DA                           219  *uses d1, d0, and a1
000011DA                           220  *using values in d3 (mode), d6 (register), and d5 (size) prints address mode
000011DA                           221  *uses d1, d0, and a1
000011DA                           222  ADDRMODEALL
000011DA                           223  *comparisons
000011DA  B67C 0000                224  AM000   CMP     #%000,D3
000011DE  6600 001A                225          BNE     AM001
000011E2  43F9 000020E1            226          LEA     VALD,A1
000011E8  4E4F                     227          TRAP    #15
000011EA  1206                     228          MOVE.B  D6,D1       *moving ea num to d1 to print
000011EC  103C 0003                229          MOVE.B  #3,D0       *moving 3 to d0 to print register number
000011F0  4E4F                     230          TRAP    #15         *printing register number
000011F2  103C 000E                231          MOVE.B  #14,D0      *replacing 14 in d0 to print strings
000011F6  6000 013C                232          BRA     AMEND
000011FA                           233  
000011FA                           234          
000011FA  B67C 0001                235  AM001   CMP     #%001,D3
000011FE  6600 0022                236          BNE     AM010
00001202  BA7C 0000                237          CMP     #00,D5
00001206  6700 0D3A                238          BEQ     DSERR
0000120A  43F9 000020DF            239          LEA     VALA,A1
00001210  4E4F                     240          TRAP    #15
00001212  1206                     241          MOVE.B  D6,D1       *moving ea num to d1 to print
00001214  103C 0003                242          MOVE.B  #3,D0       *moving 3 to d0 to print register number
00001218  4E4F                     243          TRAP    #15         *printing register number
0000121A  103C 000E                244          MOVE.B  #14,D0      *replacing 14 in d0 to print strings
0000121E  6000 0114                245          BRA     AMEND
00001222                           246  
00001222  B67C 0002                247  AM010   CMP     #%010,D3
00001226  6600 002A                248          BNE     AM011
0000122A  43F9 000020E9            249          LEA     OPENPTR,A1
00001230  4E4F                     250          TRAP    #15
00001232  43F9 000020DF            251          LEA     VALA,A1
00001238  4E4F                     252          TRAP    #15
0000123A  1206                     253          MOVE.B  D6,D1       *moving ea num to d1 to print
0000123C  103C 0003                254          MOVE.B  #3,D0       *moving 3 to d0 to print register number
00001240  4E4F                     255          TRAP    #15         *printing register number
00001242  103C 000E                256          MOVE.B  #14,D0      *replacing 14 in d0 to print strings
00001246  43F9 000020EE            257          LEA     CLOSEPTR,A1
0000124C  4E4F                     258          TRAP    #15
0000124E  6000 00E4                259          BRA     AMEND
00001252                           260  
00001252  B67C 0003                261  AM011   CMP     #%011,D3
00001256  6600 002A                262          BNE     AM100
0000125A  43F9 000020E9            263          LEA     OPENPTR,A1
00001260  4E4F                     264          TRAP    #15
00001262  43F9 000020DF            265          LEA     VALA,A1
00001268  4E4F                     266          TRAP    #15
0000126A  1206                     267          MOVE.B  D6,D1       *moving ea num to d1 to print
0000126C  103C 0003                268          MOVE.B  #3,D0       *moving 3 to d0 to print register number
00001270  4E4F                     269          TRAP    #15         *printing register number
00001272  103C 000E                270          MOVE.B  #14,D0      *replacing 14 in d0 to print strings
00001276  43F9 000020F0            271          LEA     CLOSEIPTR,A1
0000127C  4E4F                     272          TRAP    #15
0000127E  6000 00B4                273          BRA     AMEND
00001282                           274  
00001282  B67C 0004                275  AM100   CMP     #%100,D3
00001286  6600 002A                276          BNE     AM111
0000128A  43F9 000020EB            277          LEA     OPENDPTR,A1
00001290  4E4F                     278          TRAP    #15
00001292  43F9 000020DF            279          LEA     VALA,A1
00001298  4E4F                     280          TRAP    #15
0000129A  1206                     281          MOVE.B  D6,D1       *moving ea num to d1 to print
0000129C  103C 0003                282          MOVE.B  #3,D0       *moving 3 to d0 to print register number
000012A0  4E4F                     283          TRAP    #15         *printing register number
000012A2  103C 000E                284          MOVE.B  #14,D0      *replacing 14 in d0 to print strings
000012A6  43F9 000020EE            285          LEA     CLOSEPTR,A1
000012AC  4E4F                     286          TRAP    #15
000012AE  6000 0084                287          BRA     AMEND
000012B2                           288  
000012B2  B67C 0007                289  AM111   CMP     #%111,D3
000012B6  6600 0C8A                290          BNE     DSERR
000012BA  BC7C 0000                291          CMP     #%000,D6
000012BE  6600 0020                292          BNE     AM111001
000012C2  43F9 000020F5            293          LEA     DOLLAR,A1
000012C8  4E4F                     294          TRAP    #15
000012CA  341A                     295          MOVE.W  (A2)+,D2
000012CC  48E7 0400                296          MOVEM.L D5,-(SP)    
000012D0  1A3C 0030                297          MOVE.B  #48,D5
000012D4  4EB8 1148                298          JSR     HEXOUT
000012D8  4CDF 0020                299          MOVEM.L (SP)+,D5
000012DC  6000 0056                300          BRA     AMEND
000012E0                           301          
000012E0                           302  AM111001
000012E0  BC7C 0001                303          CMP     #%001,D6
000012E4  6600 0020                304          BNE     AM111100
000012E8  43F9 000020F5            305          LEA     DOLLAR,A1
000012EE  4E4F                     306          TRAP    #15
000012F0  241A                     307          MOVE.L  (A2)+,D2
000012F2  48E7 0400                308          MOVEM.L D5,-(SP)
000012F6  1A3C 0030                309          MOVE.B  #48,D5
000012FA  4EB8 1148                310          JSR     HEXOUT
000012FE  4CDF 0020                311          MOVEM.L (SP)+,D5
00001302  6000 0030                312          BRA     AMEND
00001306                           313          
00001306                           314  AM111100
00001306  BC7C 0004                315          CMP     #%100,D6
0000130A  6600 0C36                316          BNE     DSERR
0000130E  43F9 000020E3            317          LEA     VALN,A1
00001314  4E4F                     318          TRAP    #15
00001316  341A                     319          MOVE.W  (A2)+,D2
00001318  48E7 0400                320          MOVEM.L D5,-(SP)    
0000131C  1A3C 0030                321          MOVE.B  #48,D5
00001320  103C 0003                322          MOVE.B  #3,D0
00001324  1202                     323          MOVE.B  D2,D1
00001326  4E4F                     324          TRAP    #15
00001328  103C 000E                325          MOVE.B  #14,D0
0000132C  4CDF 0020                326          MOVEM.L (SP)+,D5
00001330  6000 0002                327          BRA     AMEND
00001334                           328          
00001334  103C 000E                329  AMEND   MOVE.B  #14,D0
00001338  4E75                     330          RTS
0000133A                           331  
0000133A                           332  *--------------------------------------------------------------------------------------------------
0000133A                           333  *Each machine code iterated through will be in D4. You can use all data registers as there will be a stack pointer involved
0000133A                           334  *You will kind of have to locate the label for the first 4 bits of the machine code. There is a special case where the prefix of 000 can be variable with the size parameter
0000133A                           335  
0000133A                           336  *During the processing of each machine code, we skip the first four bits as they have been passed through during the searching system. The exception to this is two bits for machine codes that start with 00.
0000133A                           337  
0000133A                           338  *CODING INSTRUCTIONS: You should not touch D0 as we want to keep it as the trap task. If for any reason you have to touch D0, make sure you set it back to #14 for printing the strings.
0000133A                           339  *Some codes take up an extra length, and while the iterator goes through each word by default, you can manually increment the pointer within the disassembly
0000133A                           340  
0000133A                           341  DISASM                      *DISASM: Disassemble a machine code
0000133A  E34C                     342          LSL.W   #1,D4       * Tier 0 binary search
0000133C  6500 0010                343          BCS     DS1
00001340  6000 0002                344          BRA     DS0
00001344                           345  
00001344                           346  *DS Tier 1 ----------------------------------------------------------------------------------------
00001344                           347  
00001344                           348  DS0                         *DS0: Tier 1 binary search for 0 side
00001344  E34C                     349          LSL.W   #1,D4       
00001346  6500 01B4                350          BCS     DS01
0000134A  6000 000C                351          BRA     DS00
0000134E                           352  
0000134E                           353  DS1                         *DS1: Tier 1 binary search for 1 side
0000134E  E34C                     354          LSL.W   #1,D4       
00001350  6500 01BE                355          BCS     DS11
00001354  6000 01B0                356          BRA     DS10
00001358                           357  
00001358                           358  DS00                        *DS00: Disassembly processing for 00 prefix
00001358  E55C                     359          ROL.W   #2,D4       
0000135A  1A04                     360          MOVE.B  D4,D5
0000135C  0205 0003                361          ANDI.B  #%11,D5
00001360  0C05 0000                362          CMPI.B  #%00,D5
00001364  6700 0006                363          BEQ     DAND
00001368  6000 00CC                364          BRA     DMOVE2
0000136C                           365  
0000136C  E75C                     366  DAND    ROL.W   #3,D4           ; shift D4 left by 3 bits to get register number
0000136E  1A04                     367          MOVE.B  D4,D5           ; move the byte in D4 to D5
00001370  0205 0007                368          ANDI.B  #%111,D5        ; AND operation to isolate the last 3 bits
00001374  DA39 000020E1            369          ADD.B   VALD,D5         ; Convert register number to ASCII
0000137A  43F9 000020E1            370          LEA     VALD,A1         ; Load effective address of Dn
00001380  4E4F                     371          TRAP    #15             ; Print Dn
00001382  1E05                     372          MOVE.B  D5,D7           ; Store the register number for later use
00001384                           373  
00001384  E75C                     374          ROL.W   #3,D4           ; shift D4 left by 3 bits to get opmode
00001386  1A04                     375          MOVE.B  D4,D5           ; move the byte in D4 to D5
00001388  0205 0007                376          ANDI.B  #%111,D5        ; AND operation to isolate the last 3 bits
0000138C  BA3C 0000                377          CMP.B   #%000,D5        ; compare with byte size
00001390  6700 0016                378          BEQ     DANDB
00001394  BA3C 0001                379          CMP.B   #%001,D5        ; compare with word size
00001398  6700 0022                380          BEQ     DANDW
0000139C  BA3C 0002                381          CMP.B   #%010,D5        ; compare with long size
000013A0  6700 002E                382          BEQ     DANDL
000013A4                           383          
000013A4  6000 0BA8                384          BRA     DSEND           ; branch to DSEND in case of invalid code
000013A8                           385  
000013A8  43F9 0000210C            386  DANDB   LEA     ANDM,A1         ; load effective address of ANDM string
000013AE  4E4F                     387          TRAP    #15             ; print ANDM string
000013B0  43F9 000020D6            388          LEA     MODEB,A1        ; load effective address of MODEB string
000013B6  4E4F                     389          TRAP    #15             ; print MODEB string
000013B8  6000 002A                390          BRA     DANDA           ; branch to addressing mode parsing
000013BC                           391  
000013BC  43F9 0000210C            392  DANDW   LEA     ANDM,A1         ; load effective address of ANDM string
000013C2  4E4F                     393          TRAP    #15             ; print ANDM string
000013C4  43F9 000020D9            394          LEA     MODEW,A1        ; load effective address of MODEW string
000013CA  4E4F                     395          TRAP    #15             ; print MODEW string
000013CC  6000 0016                396          BRA     DANDA           ; branch to addressing mode parsing
000013D0                           397  
000013D0  43F9 0000210C            398  DANDL   LEA     ANDM,A1         ; load effective address of ANDM string
000013D6  4E4F                     399          TRAP    #15             ; print ANDM string
000013D8  43F9 000020DC            400          LEA     MODEL,A1        ; load effective address of MODEL string
000013DE  4E4F                     401          TRAP    #15             ; print MODEL string
000013E0  6000 0002                402          BRA     DANDA           ; branch to addressing mode parsing
000013E4                           403  
000013E4  ED5C                     404  DANDA   ROL.W   #6,D4           ; shift D4 left by 6 bits to get addressing mode and register
000013E6                           405  
000013E6  1A04                     406          MOVE.B  D4,D5           ; move the byte in D4 to D5
000013E8  0205 0038                407          ANDI.B  #%111000,D5     ; AND operation to isolate the mode bits
000013EC  E61D                     408          ROR.B   #3,D5           ; shift D5 right by 3 bits to get mode
000013EE  43F9 000020AA            409          LEA     SM3,A1          ; load effective address of SM3 string
000013F4  4E4F                     410          TRAP    #15             ; print space
000013F6  1C05                     411          MOVE.B  D5,D6           ; store mode in D6 for further checks
000013F8                           412  
000013F8  0204 0007                413          ANDI.B  #%111,D4        ; AND operation to isolate the last 3 bits in D4
000013FC  D839 000020E1            414          ADD.B   VALD,D4         ; convert register number to ASCII
00001402  43F9 000020E1            415          LEA     VALD,A1         ; load effective address of Dn
00001408  4E4F                     416          TRAP    #15             ; print Dn
0000140A                           417  
0000140A  BC3C 0000                418          CMP.B   #%000,D6        ; compare mode with Dn
0000140E  6700 0B3E                419          BEQ     DSEND
00001412  BC3C 0002                420          CMP.B   #%010,D6        ; compare mode with (An)
00001416  6700 0B36                421          BEQ     DSEND
0000141A  BC3C 0003                422          CMP.B   #%011,D6        ; compare mode with (An)+
0000141E  6700 0B2E                423          BEQ     DSEND
00001422  BC3C 0004                424          CMP.B   #%100,D6        ; compare mode with -(An)
00001426  6700 0B26                425          BEQ     DSEND
0000142A  BC3C 0007                426          CMP.B   #%111,D6        ; compare mode with (xxx).W or (xxx).L
0000142E  6700 0B1E                427          BEQ     DSEND
00001432  6000 0B1A                428          BRA     DSEND           ; branch to DSEND in case of invalid code
00001436                           429          
00001436                           430  *NEEDS INTEGRATION WITH AND OPCODE AND REST OF 00 PROCESSING
00001436  4E71                     431  DMOVE2  NOP                 *DMOVE2: Disassembly function serving MOVE and MOVEA
00001438                           432          *size in d5 from above processing
00001438  43F9 000020FB            433          LEA     MOVEM,A1
0000143E  4E4F                     434          TRAP    #15
00001440                           435                  
00001440                           436          *dest reg to d7
00001440  E75C                     437          ROL.W   #3,D4
00001442  1E04                     438          MOVE.B  D4,D7
00001444  CE3C 0007                439          AND.B   #%111,D7
00001448                           440          
00001448                           441          *dest mode to d3: An means MOVEA
00001448  E75C                     442          ROL.W   #3,D4
0000144A  1604                     443          MOVE.B  D4,D3
0000144C  C63C 0007                444          AND.B   #%111,D3
00001450  3C43                     445          MOVE.W  D3,A6
00001452                           446          
00001452  B67C 0001                447          CMP     #%001,D3
00001456  6700 0082                448          BEQ     DMOVEA
0000145A                           449  MOVECONT
0000145A                           450  *printing size then first addressing moode, then comma
0000145A                           451  *size is different for move
0000145A  103C 000E                452  MSIZE   MOVE.B  #14,D0
0000145E  BA3C 0001                453          CMP.B   #%01,D5
00001462  6700 001E                454          BEQ     MSIZEB
00001466  BA3C 0003                455          CMP.B   #%11,D5
0000146A  6700 0020                456          BEQ     MSIZEW
0000146E  BA3C 0002                457          CMP.B   #%10,D5
00001472  6700 0022                458          BEQ     MSIZEL
00001476  BA3C 0003                459          CMP.B   #%11,D5
0000147A  6700 0010                460          BEQ     MSIZEW       *Assume WORD type on memory pointer things
0000147E  6000 0AC2                461          BRA     DSERR
00001482                           462          
00001482  43F9 000020D6            463  MSIZEB  LEA     MODEB,A1
00001488  6000 0016                464          BRA     MSDONE
0000148C                           465  
0000148C  43F9 000020D9            466  MSIZEW  LEA     MODEW,A1
00001492  6000 000C                467          BRA     MSDONE
00001496                           468  
00001496  43F9 000020DC            469  MSIZEL  LEA     MODEL,A1
0000149C  6000 0002                470          BRA     MSDONE
000014A0                           471  
000014A0  4E4F                     472  MSDONE  TRAP    #15
000014A2                           473  
000014A2  43F9 000020C0            474          LEA     SM7,A1
000014A8  4E4F                     475          TRAP    #15
000014AA                           476          
000014AA                           477          *source mode to d3
000014AA  E75C                     478          ROL.W   #3,D4
000014AC  1604                     479          MOVE.B  D4,D3
000014AE  C63C 0007                480          AND.B   #%111,D3
000014B2                           481          
000014B2                           482          *source reg to d6
000014B2  E75C                     483          ROL.W   #3,D4
000014B4  1C04                     484          MOVE.B  D4,D6
000014B6  CC3C 0007                485          AND.B   #%111,D6
000014BA                           486          
000014BA  4EB8 11DA                487          JSR     ADDRMODEALL
000014BE  B67C 0001                488          CMP     #%001,D3
000014C2  6700 002C                489          BEQ     MOVEERRCHECK    *as size is diff, err check for byte op on addr reg direct
000014C6  43F9 000020F3            490          LEA     COMMA,A1
000014CC  4E4F                     491          TRAP    #15
000014CE  1C07                     492          MOVE.B  D7,D6
000014D0  360E                     493          MOVE.W  A6,D3
000014D2  4EB8 11DA                494          JSR     ADDRMODEALL
000014D6  6000 0A76                495          BRA     DSEND
000014DA                           496  
000014DA  4E71                     497  DMOVEA  NOP
000014DC  BA7C 0001                498          CMP     #%01,D5     *if size is byte, err
000014E0  6700 0A60                499          BEQ     DSERR
000014E4  43F9 000020DF            500          LEA     VALA,A1        *else, print A and return
000014EA  4E4F                     501          TRAP    #15
000014EC  6000 FF6C                502          BRA     MOVECONT
000014F0                           503  
000014F0                           504  MOVEERRCHECK
000014F0  BA7C 0001                505          CMP     #%01,D5
000014F4  6700 0A4C                506          BEQ     DSERR
000014F8  6000 0A54                507          BRA     DSEND
000014FC                           508  
000014FC                           509          
000014FC                           510  
000014FC                           511  *DS Tier 2 ----------------------------------------------------------------------------------------
000014FC                           512  
000014FC                           513  DS01                        *DS01: Tier 2 binary search for 01 side
000014FC  E34C                     514          LSL.W   #1,D4
000014FE  6500 0024                515          BCS     DS011
00001502  6000 0016                516          BRA     DS010
00001506                           517  
00001506                           518  DS10                        *DS10: Tier 2 binary search for 10 side
00001506  E34C                     519          LSL.W   #1,D4
00001508  6500 002E                520          BCS     DS101
0000150C  6000 0020                521          BRA     DS100
00001510                           522  
00001510                           523  DS11                        *DS11: Tier 2 binary search for 11 side
00001510  E34C                     524          LSL.W   #1,D4
00001512  6500 0038                525          BCS     DS111
00001516  6000 002A                526          BRA     DS110
0000151A                           527  
0000151A                           528  *DS Tier 3 ----------------------------------------------------------------------------------------
0000151A                           529  
0000151A                           530  DS010                       *DS010: Tier 3 binary search for 010 side
0000151A  E34C                     531          LSL.W   #1,D4
0000151C  6500 0354                532          BCS     DS0101
00001520  6000 0034                533          BRA     DS0100
00001524                           534  
00001524                           535  DS011                       *DS011: Tier 3 binary search for 011 side
00001524  E34C                     536          LSL.W   #1,D4
00001526  6500 0538                537          BCS     DS0111
0000152A  6000 03C0                538          BRA     DS0110
0000152E                           539  
0000152E                           540  DS100                       *DS100: Tier 3 binary search for 100 side
0000152E  E34C                     541          LSL.W   #1,D4
00001530  6500 0668                542          BCS     DS1001
00001534  6000 0594                543          BRA     DS1000
00001538                           544  
00001538                           545  DS101                       *DS101: Tier 3 binary search for 101 side
00001538  E34C                     546          LSL.W   #1,D4
0000153A  6500 06F6                547          BCS     DS1011
0000153E  6000 06EC                548          BRA     DS1010
00001542                           549  
00001542                           550  DS110                       *DS110: Tier 3 binary search for 110 side
00001542  E34C                     551          LSL.W   #1,D4
00001544  6500 06F8                552          BCS     DS1101
00001548  6000 06EE                553          BRA     DS1100
0000154C                           554  
0000154C                           555  DS111                       *DS111: Tier 3 binary search for 111 side
0000154C  E34C                     556          LSL.W   #1,D4
0000154E  6500 09EC                557          BCS     DS1111
00001552  6000 07D2                558          BRA     DS1110
00001556                           559  
00001556                           560  *DS Tier 4 ----------------------------------------------------------------------------------------
00001556                           561  
00001556                           562  DS0100                      *DS0100: Processing for 0100 prefix
00001556  0C44 E710                563          CMPI.W  #%1110011100010000,D4
0000155A  6700 0034                564          BEQ     DNOP
0000155E  0C44 E750                565          CMPI.W  #%1110011101010000,D4
00001562  6700 021E                566          BEQ     DRTS
00001566                           567          
00001566  E95C                     568          ROL.W   #4,D4
00001568  1404                     569          MOVE.B  D4,D2
0000156A  0202 000F                570          ANDI.B  #%1111,D2
0000156E                           571          
0000156E  B43C 000E                572          CMP.B   #%1110,D2
00001572  6700 0158                573          BEQ     DJSR
00001576                           574          
00001576  B43C 0006                575          CMP.B   #%0110,D2
0000157A  6700 0020                576          BEQ     DNOT
0000157E                           577          
0000157E  1602                     578          MOVE.B  D2,D3
00001580  0203 0001                579          ANDI.B  #%1,D3
00001584  B63C 0001                580          CMP.B   #1,D3
00001588  6700 0204                581          BEQ     DLEA
0000158C                           582          
0000158C  6000 09C0                583          BRA     DSEND
00001590                           584  
00001590  43F9 000020F7            585  DNOP    LEA     NOPM,A1
00001596  4E4F                     586          TRAP    #15
00001598  6000 09B4                587          BRA     DSEND
0000159C                           588          
0000159C  E55C                     589  DNOT    ROL.W   #2,D4           ; shift D4 left by 2 bits to get size
0000159E  1A04                     590          MOVE.B  D4,D5           ; move the byte in D4 to D5
000015A0  0205 0003                591          ANDI.B  #%11,D5         ; AND operation to isolate the last 2 bits
000015A4                           592  
000015A4  BA3C 0000                593          CMP.B   #%00,D5         ; compare with byte size
000015A8  6700 0016                594          BEQ     DNOTB
000015AC  BA3C 0001                595          CMP.B   #%01,D5         ; compare with word size
000015B0  6700 0022                596          BEQ     DNOTW
000015B4  BA3C 0002                597          CMP.B   #%10,D5         ; compare with long size
000015B8  6700 002E                598          BEQ     DNOTL
000015BC                           599          
000015BC  6000 0990                600          BRA     DSEND           ; branch to DSEND in case of invalid code
000015C0                           601  
000015C0  43F9 00002113            602  DNOTB   LEA     NOTM,A1         ; load effective address of NOTM string
000015C6  4E4F                     603          TRAP    #15             ; print NOTM string
000015C8  43F9 000020D6            604          LEA     MODEB,A1        ; load effective address of MODEB string
000015CE  4E4F                     605          TRAP    #15             ; print MODEB string
000015D0  6000 002A                606          BRA     DNOTA           ; branch to addressing mode parsing
000015D4                           607  
000015D4  43F9 00002113            608  DNOTW   LEA     NOTM,A1         ; load effective address of NOTM string
000015DA  4E4F                     609          TRAP    #15             ; print NOTM string
000015DC  43F9 000020D9            610          LEA     MODEW,A1        ; load effective address of MODEW string
000015E2  4E4F                     611          TRAP    #15             ; print MODEW string
000015E4  6000 0016                612          BRA     DNOTA           ; branch to addressing mode parsing
000015E8                           613  
000015E8  43F9 00002113            614  DNOTL   LEA     NOTM,A1         ; load effective address of NOTM string
000015EE  4E4F                     615          TRAP    #15             ; print NOTM string
000015F0  43F9 000020DC            616          LEA     MODEL,A1        ; load effective address of MODEL string
000015F6  4E4F                     617          TRAP    #15             ; print MODEL string
000015F8  6000 0002                618          BRA     DNOTA           ; branch to addressing mode parsing
000015FC                           619  
000015FC  ED5C                     620  DNOTA   ROL.W   #6,D4           ; shift D4 left by 6 bits to get addressing mode and register
000015FE  1204                     621          MOVE.B  D4,D1           ; move the byte in D4 to D1
00001600  0201 003F                622          ANDI.B  #%111111,D1     ; AND operation to isolate the last 6 bits
00001604                           623  
00001604                           624          ; Now process addressing mode and register based on the value in D1
00001604                           625  
00001604  1A01                     626          MOVE.B  D1,D5           ; Move the byte in D1 to D5
00001606  0205 0007                627          ANDI.B  #%111,D5        ; AND operation to isolate the last 3 bits
0000160A  6700 0026                628          BEQ     DREG            ; If it is direct register mode
0000160E  BA3C 0002                629          CMP.B   #%010,D5        ; Compare with An
00001612  6700 0036                630          BEQ     ADREG
00001616  BA3C 0003                631          CMP.B   #%011,D5        ; Compare with (An)+
0000161A  6700 0046                632          BEQ     ADREGP
0000161E  BA3C 0004                633          CMP.B   #%100,D5        ; Compare with -(An)
00001622  6700 005E                634          BEQ     MADREG
00001626  BA3C 0007                635          CMP.B   #%111,D5        ; Compare with (xxx).W or (xxx).L
0000162A  6700 007E                636          BEQ     EXT
0000162E                           637              
0000162E  6000 091E                638          BRA     DSEND
00001632                           639  
00001632  1C01                     640  DREG    MOVE.B  D1,D6           ; Move the byte in D1 to D6
00001634  0206 0007                641          ANDI.B  #%111,D6        ; AND operation to isolate the last 3 bits for register number
00001638  DC39 000020E1            642          ADD.B   VALD,D6         ; Convert register number to ASCII
0000163E  43F9 000020E1            643          LEA     VALD,A1         ; Load effective address of Dn
00001644  4E4F                     644          TRAP    #15             ; Print Dn
00001646  6000 0906                645          BRA     DSEND
0000164A                           646  
0000164A  1C01                     647  ADREG   MOVE.B  D1,D6           ; Similar to DREG, but for An mode
0000164C  0206 0007                648          ANDI.B  #%111,D6
00001650  DC39 000020DF            649          ADD.B   VALA,D6
00001656  43F9 000020DF            650          LEA     VALA,A1
0000165C  4E4F                     651          TRAP    #15
0000165E  6000 08EE                652          BRA     DSEND
00001662                           653  
00001662  1C01                     654  ADREGP  MOVE.B  D1,D6           ; Similar to ADREG, but for (An)+ mode
00001664  0206 0007                655          ANDI.B  #%111,D6
00001668  DC39 000020DF            656          ADD.B   VALA,D6
0000166E  43F9 000020DF            657          LEA     VALA,A1
00001674  4E4F                     658          TRAP    #15
00001676  43F9 000020F0            659          LEA     CLOSEIPTR,A1    ; Load effective address of )+
0000167C  4E4F                     660          TRAP    #15             ; Print )+
0000167E  6000 08CE                661          BRA     DSEND
00001682                           662  
00001682  1C01                     663  MADREG  MOVE.B  D1,D6           ; Similar to ADREG, but for -(An) mode
00001684  0206 0007                664          ANDI.B  #%111,D6
00001688  DC39 000020DF            665          ADD.B   VALA,D6
0000168E  43F9 000020EB            666          LEA     OPENDPTR,A1     ; Load effective address of -(
00001694  4E4F                     667          TRAP    #15             ; Print -(
00001696  43F9 000020DF            668          LEA     VALA,A1
0000169C  4E4F                     669          TRAP    #15
0000169E  43F9 000020EE            670          LEA     CLOSEPTR,A1     ; Load effective address of )
000016A4  4E4F                     671          TRAP    #15             ; Print )
000016A6  6000 08A6                672          BRA     DSEND
000016AA                           673  
000016AA  1C01                     674  EXT     MOVE.B  D1,D6           ; For (xxx).W and (xxx).L modes
000016AC  0206 0001                675          ANDI.B  #%1,D6
000016B0  6700 000E                676          BEQ     EXTW
000016B4  43F9 000020E3            677          LEA     VALN,A1         ; Load effective address of #
000016BA  4E4F                     678          TRAP    #15             ; Print #
000016BC  6000 0890                679          BRA     DSEND
000016C0                           680  
000016C0  43F9 000020E5            681  EXTW    LEA     VAL0,A1         ; Load effective address of 0
000016C6  4E4F                     682          TRAP    #15             ; Print 0
000016C8  6000 0884                683          BRA     DSEND
000016CC                           684  
000016CC                           685          
000016CC  E55C                     686  DJSR    ROL.W   #2,D4
000016CE  1404                     687          MOVE.B  D4,D2
000016D0  0202 0007                688          ANDI.B  #%111,D2
000016D4  0C02 0002                689          CMPI.B  #%10,D2
000016D8  6600 0868                690          BNE     DSERR
000016DC                           691          
000016DC  43F9 00002138            692          LEA     JSRM,A1
000016E2  4E4F                     693          TRAP    #15
000016E4                           694          
000016E4  43F9 000020C0            695          LEA     SM7,A1
000016EA  4E4F                     696          TRAP    #15
000016EC                           697  
000016EC  E75C                     698          ROL.W   #3,D4       * [D2] address mode
000016EE  1404                     699          MOVE.B  D4,D2
000016F0  0202 0007                700          ANDI.B  #%111,D2
000016F4                           701          
000016F4  E75C                     702          ROL.W   #3,D4       * [D1] address register
000016F6  1204                     703          MOVE.B  D4,D1
000016F8  0201 0007                704          ANDI.B  #%111,D1
000016FC                           705          
000016FC  0C02 0002                706          CMPI.B  #%010,D2
00001700  6700 001E                707          BEQ     DJSR_REG
00001704                           708          
00001704  0C02 0007                709          CMPI.B  #%111,D2
00001708  6600 0838                710          BNE     DSERR
0000170C                           711          
0000170C  0C01 0000                712          CMPI.B  #%000,D1
00001710  6700 0034                713          BEQ     DJSR_CUSW
00001714                           714          
00001714  0C01 0001                715          CMPI.B  #%001,D1
00001718  6700 004A                716          BEQ     DJSR_CUSL
0000171C                           717          
0000171C  6000 0830                718          BRA     DSEND
00001720                           719          
00001720                           720          
00001720                           721          
00001720                           722  DJSR_REG        
00001720  43F9 000020E9            723          LEA     OPENPTR,A1
00001726  4E4F                     724          TRAP    #15
00001728                           725          
00001728  43F9 000020DF            726          LEA     VALA,A1
0000172E  4E4F                     727          TRAP    #15
00001730                           728          
00001730  103C 0003                729          MOVE.B  #3,D0
00001734  4E4F                     730          TRAP    #15
00001736  103C 000E                731          MOVE.B  #14,D0
0000173A                           732          
0000173A  43F9 000020EE            733          LEA     CLOSEPTR,A1
00001740  4E4F                     734          TRAP    #15
00001742                           735          
00001742  6000 080A                736          BRA     DSEND
00001746                           737  
00001746                           738          
00001746                           739  DJSR_CUSW
00001746  43F9 000020F5            740          LEA     DOLLAR,A1
0000174C  4E4F                     741          TRAP    #15
0000174E  341A                     742          MOVE.W  (A2)+,D2
00001750  48E7 0400                743          MOVEM.L D5,-(SP)
00001754  1A3C 0030                744          MOVE.B  #48,D5
00001758  4EB8 1148                745          JSR     HEXOUT
0000175C  4CDF 0020                746          MOVEM.L (SP)+,D5
00001760  6000 07EC                747          BRA     DSEND
00001764                           748  
00001764                           749  DJSR_CUSL
00001764  43F9 000020F5            750          LEA     DOLLAR,A1
0000176A  4E4F                     751          TRAP    #15
0000176C  241A                     752          MOVE.L  (A2)+,D2
0000176E  48E7 0400                753          MOVEM.L D5,-(SP)
00001772  1A3C 0030                754          MOVE.B  #48,D5
00001776  4EB8 1148                755          JSR     HEXOUT
0000177A  4CDF 0020                756          MOVEM.L (SP)+,D5
0000177E  6000 07CE                757          BRA     DSEND
00001782                           758          
00001782  43F9 0000213C            759  DRTS    LEA     RTSM,A1
00001788  4E4F                     760          TRAP    #15
0000178A  6000 07C2                761          BRA     DSEND
0000178E                           762          
0000178E                           763          
0000178E                           764  DLEA    *printing
0000178E  43F9 00002108            765          LEA     LEAM,A1
00001794  4E4F                     766          TRAP    #15
00001796  43F9 000020C0            767          LEA     SM7,A1
0000179C  4E4F                     768          TRAP    #15
0000179E                           769  
0000179E                           770          *getting destination register
0000179E  0202 000E                771          ANDI.B  #%1110,D2
000017A2  E21A                     772          ROR.B   #1,D2
000017A4  3E02                     773          MOVE.W  D2,D7
000017A6                           774          
000017A6                           775          *ensuring that next two bits are 11
000017A6  E55C                     776          ROL.W   #2,D4
000017A8  1C04                     777          MOVE.B  D4,D6
000017AA  0206 0003                778          ANDI.B  #%11,D6
000017AE  BC3C 0003                779          CMP.B   #%11,D6
000017B2  6600 078E                780          BNE     DSERR
000017B6                           781          
000017B6                           782          *getting ea mode
000017B6  E75C                     783          ROL.W   #3,D4
000017B8  1604                     784          MOVE.B  D4,D3
000017BA  0203 0007                785          ANDI.B  #%111,D3
000017BE                           786          
000017BE                           787          *getting ea reg
000017BE  E75C                     788          ROL.W   #3,D4
000017C0  1C04                     789          MOVE.B  D4,D6
000017C2  0206 0007                790          ANDI.B  #%111,D6
000017C6                           791          
000017C6                           792          *printing
000017C6                           793  JSR010
000017C6  B63C 0002                794          CMP.B   #%010,D3
000017CA  6600 002A                795          BNE     JSR111
000017CE  43F9 000020E9            796          LEA     OPENPTR,A1
000017D4  4E4F                     797          TRAP    #15
000017D6  43F9 000020DF            798          LEA     VALA,A1
000017DC  4E4F                     799          TRAP    #15
000017DE  103C 0003                800          MOVE.B  #3,D0
000017E2  1206                     801          MOVE.B  D6,D1
000017E4  4E4F                     802          TRAP    #15
000017E6  103C 000E                803          MOVE.B  #14,D0
000017EA  43F9 000020EE            804          LEA     CLOSEPTR,A1
000017F0  4E4F                     805          TRAP    #15
000017F2  6000 005E                806          BRA     JSRPRINT2
000017F6                           807  JSR111
000017F6  B63C 0007                808          CMP.B   #%111,D3
000017FA  6600 0746                809          BNE     DSERR
000017FE  BC3C 0000                810          CMP.B   #%000,D6
00001802  6600 0024                811          BNE     JSR111001
00001806  43F9 000020F5            812          LEA     DOLLAR,A1
0000180C  4E4F                     813          TRAP    #15
0000180E  341A                     814          MOVE.W  (A2)+,D2
00001810  48E7 0400                815          MOVEM.L D5,-(SP)    
00001814  1A3C 0030                816          MOVE.B  #48,D5
00001818  4EB8 1148                817          JSR     HEXOUT
0000181C  4CDF 0020                818          MOVEM.L (SP)+,D5
00001820  103C 000E                819          MOVE.B  #14,D0
00001824  6000 002C                820          BRA     JSRPRINT2
00001828                           821          
00001828                           822  JSR111001
00001828  BC3C 0001                823          CMP.B   #%001,D6
0000182C  6600 0714                824          BNE     DSERR
00001830  43F9 000020F5            825          LEA     DOLLAR,A1
00001836  4E4F                     826          TRAP    #15
00001838  241A                     827          MOVE.L  (A2)+,D2
0000183A  48E7 0400                828          MOVEM.L D5,-(SP)
0000183E  1A3C 0030                829          MOVE.B  #48,D5
00001842  4EB8 1148                830          JSR     HEXOUT
00001846  4CDF 0020                831          MOVEM.L (SP)+,D5
0000184A  103C 000E                832          MOVE.B  #14,D0
0000184E  6000 0002                833          BRA     JSRPRINT2
00001852                           834          
00001852                           835  JSRPRINT2
00001852  43F9 000020F3            836          LEA     COMMA,A1
00001858  4E4F                     837          TRAP    #15
0000185A  43F9 000020DF            838          LEA     VALA,A1
00001860  4E4F                     839          TRAP    #15
00001862  103C 0003                840          MOVE.B  #3,D0
00001866  3207                     841          MOVE.W  D7,D1
00001868  4E4F                     842          TRAP    #15
0000186A  103C 000E                843          MOVE.B  #14,D0
0000186E                           844          
0000186E  6000 06DE                845          BRA     DSEND
00001872                           846          
00001872                           847  
00001872                           848  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00001872                           849  
00001872  4E71                     850  DS0101  NOP
00001874                           851          
00001874  4E71                     852  DADDQ   NOP
00001876  43F9 00002100            853          LEA     ADDM,A1
0000187C  4E4F                     854          TRAP    #15
0000187E  43F9 000020E7            855          LEA     VALQ,A1
00001884  4E4F                     856          TRAP    #15
00001886                           857          
00001886                           858          *parsing data to d1
00001886  E75C                     859          ROL.W   #3,D4
00001888  1204                     860          MOVE.B  D4,D1
0000188A  C23C 0007                861          AND.B   #%111,D1
0000188E                           862          
0000188E                           863          *ensuring next bit is 0
0000188E  E35C                     864          ROL.W   #1,D4
00001890  1A04                     865          MOVE.B  D4,D5
00001892  CA3C 0001                866          AND.B   #%1,D5
00001896  BA7C 0000                867          CMP     #0,D5
0000189A  6600 06A6                868          BNE     DSERR
0000189E                           869          
0000189E                           870          *parsing and printing size
0000189E  E55C                     871          ROL.W   #2,D4
000018A0  1A04                     872          MOVE.B  D4,D5
000018A2  CA3C 0003                873          AND.B   #%11,D5
000018A6  4EB8 1190                874          JSR     SIZE
000018AA  43F9 000020C0            875          LEA     SM7,A1
000018B0  4E4F                     876          TRAP    #15
000018B2                           877          
000018B2                           878          *parsing effective address information
000018B2                           879          *mode:
000018B2  E75C                     880          ROL.W   #3,D4
000018B4  1604                     881          MOVE.B  D4,D3
000018B6  C63C 0007                882          AND.B   #%111,D3
000018BA                           883          
000018BA                           884          *register:
000018BA  E71C                     885          ROL.B   #3,D4
000018BC  1C04                     886          MOVE.B  D4,D6
000018BE  CC3C 0007                887          AND.B   #%111,D6
000018C2                           888          
000018C2                           889          *printing data
000018C2  43F9 000020E3            890          LEA     VALN,A1
000018C8  4E4F                     891          TRAP    #15
000018CA  103C 0003                892          MOVE.B  #3,D0
000018CE  4E4F                     893          TRAP    #15
000018D0  103C 000E                894          MOVE.B  #14,D0
000018D4  43F9 000020F3            895          LEA     COMMA,A1
000018DA  4E4F                     896          TRAP    #15
000018DC                           897          
000018DC  B67C 0004                898          CMP     #%100,D3
000018E0  6700 0660                899          BEQ     DSERR
000018E4  4EB8 11DA                900          JSR     ADDRMODEALL
000018E8                           901          
000018E8  6000 0664                902          BRA     DSEND
000018EC                           903          
000018EC                           904  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
000018EC                           905  
000018EC                           906  DS0110  
000018EC  E95C                     907          ROL.W   #4,D4   *Get next 4 bits
000018EE  1404                     908          MOVE.B  D4,D2   *Copy to D2
000018F0  0202 000F                909          ANDI.B  #%1111,D2   *Set all bits to 0 except next 4
000018F4                           910          
000018F4  B43C 0000                911          CMP.B   #%0000,D2   *BRA
000018F8  6700 001E                912          BEQ     DBRA
000018FC                           913          
000018FC  B43C 000E                914          CMP.B   #%1110,D2   *BGT   
00001900  6700 00A2                915          BEQ     DBGT
00001904                           916          
00001904  B43C 000F                917          CMP.B   #%1111,D2   *BLE   
00001908  6700 00D6                918          BEQ     DBLE
0000190C                           919          
0000190C  B43C 0007                920          CMP.B   #%0111,D2   *BEQ   
00001910  6700 010E                921          BEQ     DBEQ
00001914                           922          
00001914  6000 0638                923          BRA     DSEND
00001918                           924          
00001918  43F9 00002140            925  DBRA    LEA     BRAM,A1
0000191E  4E4F                     926          TRAP    #15
00001920                           927          
00001920  43F9 000020C0            928          LEA     SM7,A1
00001926  4E4F                     929          TRAP    #15
00001928                           930  
00001928  E15C                     931          ROL.W   #8,D4       * [D1] 8 bit Displacement 
0000192A  1204                     932          MOVE.B  D4,D1
0000192C  0281 00001100            933          ANDI.L  #$1100,D1
00001932                           934          
00001932  0C01 0000                935          CMPI.B  #%00000000,D1
00001936  6700 0028                936          BEQ     DBRA_16BIT      * Word
0000193A                           937          
0000193A  0C01 00FF                938          CMPI.B  #%11111111,D1
0000193E  6700 0042                939          BEQ     DBRA_32BIT      * Long
00001942                           940          
00001942                           941          * 8 Bit Displacement
00001942  43F9 000020F5            942          LEA     DOLLAR,A1
00001948  4E4F                     943          TRAP    #15
0000194A                           944          
0000194A  341A                     945          MOVE.W  (A2)+,D2
0000194C  D441                     946          ADD.W   D1,D2
0000194E  5842                     947          ADD.W   #4,D2   *unsure   
00001950  1A3C 0030                948          MOVE.B  #48,D5
00001954  4EB8 1148                949          JSR     HEXOUT
00001958  6000 05F4                950          BRA     DSEND
0000195C                           951  
0000195C                           952          *Displacement is put in D1      
0000195C                           953          
0000195C                           954          
0000195C  6000 05F0                955          BRA     DSEND
00001960                           956          
00001960                           957  DBRA_16BIT
00001960  43F9 000020F5            958          LEA     DOLLAR,A1
00001966  4E4F                     959          TRAP    #15
00001968  341A                     960          MOVE.W  (A2)+,D2
0000196A  D44A                     961          ADD.W   A2,D2
0000196C  5542                     962          SUB.W   #2,D2   *unsure
0000196E  48E7 0400                963          MOVEM.L D5,-(SP)    
00001972  1A3C 0030                964          MOVE.B  #48,D5
00001976  4EB8 1148                965          JSR     HEXOUT
0000197A  4CDF 0020                966          MOVEM.L (SP)+,D5
0000197E  6000 05CE                967          BRA     DSEND
00001982                           968  
00001982                           969  DBRA_32BIT
00001982  43F9 000020F5            970          LEA     DOLLAR,A1
00001988  4E4F                     971          TRAP    #15
0000198A  241A                     972          MOVE.L  (A2)+,D2
0000198C  D48A                     973          ADD.L   A2,D2
0000198E  5582                     974          SUB.L   #2,D2   *unsure
00001990  48E7 0400                975          MOVEM.L D5,-(SP)
00001994  1A3C 0030                976          MOVE.B  #48,D5
00001998  4EB8 1148                977          JSR     HEXOUT
0000199C  4CDF 0020                978          MOVEM.L (SP)+,D5
000019A0  6000 05AC                979          BRA     DSEND
000019A4                           980          
000019A4                           981          
000019A4                           982          
000019A4  43F9 0000212C            983  DBGT    LEA     BGTM,A1
000019AA  4E4F                     984          TRAP    #15
000019AC                           985          
000019AC  43F9 000020C0            986          LEA     SM7,A1
000019B2  4E4F                     987          TRAP    #15
000019B4                           988          
000019B4  E15C                     989          ROL.W   #8,D4       * [D1] 8 bit Displacement 
000019B6  1204                     990          MOVE.B  D4,D1
000019B8  0241 00FF                991          ANDI.W  #%0000000011111111,D1
000019BC                           992          
000019BC  0C01 0000                993          CMPI.B  #%00000000,D1
000019C0  679E                     994          BEQ     DBRA_16BIT      * Word
000019C2                           995          
000019C2  0C01 00FF                996          CMPI.B  #%11111111,D1
000019C6  67BA                     997          BEQ     DBRA_32BIT      * Long
000019C8                           998          
000019C8  43F9 000020F5            999          LEA     DOLLAR,A1
000019CE  4E4F                    1000          TRAP    #15
000019D0                          1001      
000019D0  340A                    1002          MOVE.W  A2,D2
000019D2  D441                    1003          ADD.W   D1,D2
000019D4                          1004    
000019D4  1A3C 0030               1005          MOVE.B  #48,D5
000019D8  4EB8 1148               1006          JSR     HEXOUT
000019DC  6000 0570               1007          BRA     DSEND
000019E0                          1008  
000019E0  43F9 00002130           1009  DBLE    LEA     BLEM,A1
000019E6  4E4F                    1010          TRAP    #15
000019E8                          1011          
000019E8  43F9 000020C0           1012          LEA     SM7,A1
000019EE  4E4F                    1013          TRAP    #15
000019F0                          1014          
000019F0  E15C                    1015          ROL.W   #8,D4       * [D1] 8 bit Displacement 
000019F2  1204                    1016          MOVE.B  D4,D1
000019F4  0241 00FF               1017          ANDI.W  #%0000000011111111,D1
000019F8                          1018          
000019F8  0C01 0000               1019          CMPI.B  #%00000000,D1
000019FC  6700 FF62               1020          BEQ     DBRA_16BIT      * Word
00001A00                          1021          
00001A00  0C01 00FF               1022          CMPI.B  #%11111111,D1
00001A04  6700 FF7C               1023          BEQ     DBRA_32BIT      * Long
00001A08                          1024          
00001A08  43F9 000020F5           1025          LEA     DOLLAR,A1
00001A0E  4E4F                    1026          TRAP    #15
00001A10                          1027          
00001A10  340A                    1028          MOVE.W  A2,D2
00001A12  D441                    1029          ADD.W   D1,D2
00001A14                          1030   
00001A14  1A3C 0030               1031          MOVE.B  #48,D5
00001A18  4EB8 1148               1032          JSR     HEXOUT
00001A1C                          1033          
00001A1C  6000 0530               1034          BRA     DSEND
00001A20                          1035  
00001A20  43F9 00002134           1036  DBEQ    LEA     BEQM,A1
00001A26  4E4F                    1037          TRAP    #15
00001A28                          1038          
00001A28  43F9 000020C0           1039          LEA     SM7,A1
00001A2E  4E4F                    1040          TRAP    #15
00001A30                          1041          
00001A30  E15C                    1042          ROL.W   #8,D4       * [D1] 8 bit Displacement 
00001A32  1204                    1043          MOVE.B  D4,D1
00001A34  0241 00FF               1044          ANDI.W  #%0000000011111111,D1
00001A38                          1045          
00001A38  0C01 0000               1046          CMPI.B  #%00000000,D1
00001A3C  6700 FF22               1047          BEQ     DBRA_16BIT      * Word
00001A40                          1048          
00001A40  0C01 00FF               1049          CMPI.B  #%11111111,D1
00001A44  6700 FF3C               1050          BEQ     DBRA_32BIT      * Long
00001A48                          1051          
00001A48  43F9 000020F5           1052          LEA     DOLLAR,A1
00001A4E  4E4F                    1053          TRAP    #15
00001A50                          1054  
00001A50  340A                    1055          MOVE.W  A2,D2
00001A52  D441                    1056          ADD.W   D1,D2
00001A54                          1057   
00001A54  1A3C 0030               1058          MOVE.B  #48,D5
00001A58  4EB8 1148               1059          JSR     HEXOUT
00001A5C                          1060          
00001A5C  6000 04F0               1061          BRA     DSEND
00001A60                          1062  
00001A60                          1063  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00001A60                          1064  
00001A60  4E71                    1065  DS0111  NOP
00001A62                          1066          
00001A62  4E71                    1067  DMOVEQ  NOP
00001A64  43F9 000020FB           1068          LEA     MOVEM,A1
00001A6A  4E4F                    1069          TRAP    #15
00001A6C  43F9 000020E7           1070          LEA     VALQ,A1
00001A72  4E4F                    1071          TRAP    #15
00001A74  43F9 000020C0           1072          LEA     SM7,A1
00001A7A  4E4F                    1073          TRAP    #15
00001A7C                          1074          
00001A7C                          1075          *getting register number
00001A7C  E75C                    1076          ROL.W   #3,D4
00001A7E  1A04                    1077          MOVE.B  D4,D5
00001A80  CA3C 0007               1078          AND.B   #%111,D5
00001A84                          1079          
00001A84                          1080          *throwing error if next digit not 0
00001A84  E35C                    1081          ROL.W   #1,D4
00001A86  1C04                    1082          MOVE.B  D4,D6
00001A88  CC3C 0001               1083          AND.B   #%1,D6
00001A8C  BC3C 0000               1084          CMP.B   #0,D6
00001A90  6600 04B0               1085          BNE     DSERR
00001A94                          1086          
00001A94                          1087          *getting data and printing information
00001A94  E15C                    1088          ROL.W   #8,D4
00001A96  1204                    1089          MOVE.B  D4,D1
00001A98  C23C 00FF               1090          AND.B   #%11111111,D1
00001A9C  43F9 000020E3           1091          LEA     VALN,A1
00001AA2  4E4F                    1092          TRAP    #15
00001AA4  103C 0003               1093          MOVE.B  #3,D0
00001AA8  4E4F                    1094          TRAP    #15
00001AAA  103C 000E               1095          MOVE.B  #14,D0
00001AAE  43F9 000020F3           1096          LEA     COMMA,A1
00001AB4  4E4F                    1097          TRAP    #15
00001AB6  43F9 000020E1           1098          LEA     VALD,A1
00001ABC  4E4F                    1099          TRAP    #15
00001ABE  103C 0003               1100          MOVE.B  #3,D0
00001AC2  3205                    1101          MOVE.W  D5,D1
00001AC4  4E4F                    1102          TRAP    #15
00001AC6                          1103          
00001AC6  6000 0486               1104          BRA     DSEND
00001ACA                          1105          
00001ACA                          1106  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00001ACA                          1107  
00001ACA  4E71                    1108  DS1000  NOP
00001ACC  6000 0480               1109          BRA     DSEND
00001AD0                          1110          
00001AD0  E75C                    1111  DOR     ROL.W   #3,D4           ; shift D4 left by 3 bits to get register number
00001AD2  1A04                    1112          MOVE.B  D4,D5           ; move the byte in D4 to D5
00001AD4  0205 0007               1113          ANDI.B  #%111,D5        ; AND operation to isolate the last 3 bits
00001AD8  DA39 000020E1           1114          ADD.B   VALD,D5         ; Convert register number to ASCII
00001ADE  43F9 000020E1           1115          LEA     VALD,A1         ; Load effective address of Dn
00001AE4  4E4F                    1116          TRAP    #15             ; Print Dn
00001AE6  1E05                    1117          MOVE.B  D5,D7           ; Store the register number for later use
00001AE8                          1118  
00001AE8  E75C                    1119          ROL.W   #3,D4           ; shift D4 left by 3 bits to get opmode
00001AEA  1A04                    1120          MOVE.B  D4,D5           ; move the byte in D4 to D5
00001AEC  0205 0007               1121          ANDI.B  #%111,D5        ; AND operation to isolate the last 3 bits
00001AF0  BA3C 0000               1122          CMP.B   #%000,D5        ; compare with byte size
00001AF4  6700 0016               1123          BEQ     DORB
00001AF8  BA3C 0001               1124          CMP.B   #%001,D5        ; compare with word size
00001AFC  6700 0022               1125          BEQ     DORW
00001B00  BA3C 0002               1126          CMP.B   #%010,D5        ; compare with long size
00001B04  6700 002E               1127          BEQ     DORL
00001B08                          1128          
00001B08  6000 0444               1129          BRA     DSEND           ; branch to DSEND in case of invalid code
00001B0C                          1130  
00001B0C  43F9 00002110           1131  DORB    LEA     ORM,A1          ; load effective address of ORM string
00001B12  4E4F                    1132          TRAP    #15             ; print ORM string
00001B14  43F9 000020D6           1133          LEA     MODEB,A1        ; load effective address of MODEB string
00001B1A  4E4F                    1134          TRAP    #15             ; print MODEB string
00001B1C  6000 002A               1135          BRA     DORA           ; branch to addressing mode parsing
00001B20                          1136  
00001B20  43F9 00002110           1137  DORW    LEA     ORM,A1          ; load effective address of ORM string
00001B26  4E4F                    1138          TRAP    #15             ; print ORM string
00001B28  43F9 000020D9           1139          LEA     MODEW,A1        ; load effective address of MODEW string
00001B2E  4E4F                    1140          TRAP    #15             ; print MODEW string
00001B30  6000 0016               1141          BRA     DORA           ; branch to addressing mode parsing
00001B34                          1142  
00001B34  43F9 00002110           1143  DORL    LEA     ORM,A1          ; load effective address of ORM string
00001B3A  4E4F                    1144          TRAP    #15             ; print ORM string
00001B3C  43F9 000020DC           1145          LEA     MODEL,A1        ; load effective address of MODEL string
00001B42  4E4F                    1146          TRAP    #15             ; print MODEL string
00001B44  6000 0002               1147          BRA     DORA           ; branch to addressing mode parsing
00001B48                          1148  
00001B48  ED5C                    1149  DORA    ROL.W   #6,D4           ; shift D4 left by 6 bits to get addressing mode and register
00001B4A                          1150  
00001B4A  1A04                    1151          MOVE.B  D4,D5           ; move the byte in D4 to D5
00001B4C  0205 0038               1152          ANDI.B  #%111000,D5     ; AND operation to isolate the mode bits
00001B50  E61D                    1153          ROR.B   #3,D5           ; shift D5 right by 3 bits to get mode
00001B52  43F9 000020AA           1154          LEA     SM3,A1          ; load effective address of SM3 string
00001B58  4E4F                    1155          TRAP    #15             ; print space
00001B5A  1C05                    1156          MOVE.B  D5,D6           ; store mode in D6 for further checks
00001B5C                          1157  
00001B5C  0204 0007               1158          ANDI.B  #%111,D4        ; AND operation to isolate the last 3 bits in D4
00001B60  D839 000020E1           1159          ADD.B   VALD,D4         ; convert register number to ASCII
00001B66  43F9 000020E1           1160          LEA     VALD,A1         ; load effective address of Dn
00001B6C  4E4F                    1161          TRAP    #15             ; print Dn
00001B6E                          1162  
00001B6E  BC3C 0000               1163          CMP.B   #%000,D6        ; compare mode with Dn
00001B72  6700 03DA               1164          BEQ     DSEND
00001B76  BC3C 0002               1165          CMP.B   #%010,D6        ; compare mode with (An)
00001B7A  6700 03D2               1166          BEQ     DSEND
00001B7E  BC3C 0003               1167          CMP.B   #%011,D6        ; compare mode with (An)+
00001B82  6700 03CA               1168          BEQ     DSEND
00001B86  BC3C 0004               1169          CMP.B   #%100,D6        ; compare mode with -(An)
00001B8A  6700 03C2               1170          BEQ     DSEND
00001B8E  BC3C 0007               1171          CMP.B   #%111,D6        ; compare mode with (xxx).W or (xxx).L
00001B92  6700 03BA               1172          BEQ     DSEND
00001B96  6000 03B6               1173          BRA     DSEND           ; branch to DSEND in case of invalid code
00001B9A                          1174  
00001B9A                          1175  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00001B9A                          1176  
00001B9A  4E71                    1177  DS1001  NOP
00001B9C  4E71                    1178  DSUB    NOP
00001B9E                          1179  *print sub
00001B9E  43F9 00002104           1180          LEA     SUBM,A1
00001BA4  4E4F                    1181          TRAP    #15
00001BA6                          1182  
00001BA6                          1183  *parse dn reg: 3 bits
00001BA6                          1184  *number of the data register involved
00001BA6                          1185  *nums 0-7, paired with below
00001BA6  E75C                    1186          ROL.W   #3,D4       *dn reg num in d1
00001BA8  1E04                    1187          MOVE.B  D4,D7
00001BAA  0207 0007               1188          ANDI.B  #%111,D7
00001BAE                          1189          
00001BAE  3C47                    1190          MOVE.W  D7,A6       *temporary for storage
00001BB0                          1191  
00001BB0                          1192  *parse opmode: 3 bits
00001BB0                          1193  *Dn - <ea> -> Dn: .B=000, .W=001, .L=010
00001BB0                          1194  *<ea> - <Dn> -> <ea>: .B=100, .W=101, .L=110
00001BB0                          1195  *invalid: 111, 011
00001BB0                          1196  *parse first digit separately
00001BB0  E35C                    1197          ROL.W   #1,D4       *addressing mode in d2
00001BB2  1E04                    1198          MOVE.B  D4,D7
00001BB4  0207 0001               1199          ANDI.B  #%1,D7
00001BB8                          1200          
00001BB8                          1201  *parsing next two digits of size
00001BB8  E55C                    1202          ROL.W   #2,D4       *size in d5
00001BBA  1A04                    1203          MOVE.B  D4,D5
00001BBC  0205 0003               1204          ANDI.B  #%11,D5
00001BC0  4EB8 1190               1205          JSR     SIZE
00001BC4  43F9 000020C0           1206          LEA     SM7,A1
00001BCA  4E4F                    1207          TRAP    #15
00001BCC                          1208          
00001BCC                          1209  *if addressing mode=<ea>-Dn -> <ea> print ea info first
00001BCC  BE3C 0000               1210          CMP.B   #%0,D7       *if 1, then register info printed last
00001BD0  6700 0026               1211          BEQ     DSUBEA      *branch to ea before register
00001BD4                          1212          
00001BD4                          1213  *printing register information
00001BD4                          1214  DSUBPRNTREG
00001BD4  43F9 000020E1           1215          LEA     VALD,A1
00001BDA  4E4F                    1216          TRAP    #15
00001BDC  320E                    1217          MOVE.W  A6,D1       *retrieving a6 register data
00001BDE  103C 0003               1218          MOVE.B  #3,D0       *moving 3 to d0 to print register number
00001BE2  4E4F                    1219          TRAP    #15         *printing register number
00001BE4  103C 000E               1220          MOVE.B  #14,D0      *replacing 14 in d0 to print strings
00001BE8  BE3C 0000               1221          CMP.B   #%0,D7      *if info finished printing
00001BEC  6700 0360               1222          BEQ     DSEND      *branch to end
00001BF0  43F9 000020F3           1223          LEA     COMMA,A1
00001BF6  4E4F                    1224          TRAP    #15
00001BF8                          1225  
00001BF8                          1226          
00001BF8                          1227  * parse ea mode: 3 bits
00001BF8                          1228  *Dn000, An001, (An)010, (An)+011, -(An)100, (d16An)101, (d8An,Xn)110, data111
00001BF8                          1229  *address reg direct not allowed for .B operations
00001BF8                          1230  *no invalid
00001BF8                          1231  DSUBEA
00001BF8  E75C                    1232          ROL.W   #3,D4       *ea mode
00001BFA  1604                    1233          MOVE.B  D4,D3
00001BFC  0203 0007               1234          ANDI.B  #%111,D3
00001C00                          1235  
00001C00                          1236  *parse ea reg: 3 bits
00001C00                          1237  *no invalid: paired with opmode below (nums 0-7)
00001C00                          1238  *if mode=111, 000=.W, 001=.L, 100=#<data>
00001C00  E75C                    1239          ROL.W   #3,D4       *ea mode
00001C02  1C04                    1240          MOVE.B  D4,D6
00001C04  0206 0007               1241          ANDI.B  #%111,D6
00001C08                          1242          
00001C08  2803                    1243          MOVE.L  D3,D4   *temporarily using D4 
00001C0A                          1244          
00001C0A                          1245  *comparisons
00001C0A  B67C 0004               1246          CMP     #%100,D3
00001C0E  6700 0332               1247          BEQ     DSERR
00001C12  4EB8 11DA               1248          JSR     ADDRMODEALL
00001C16  BE3C 0001               1249          CMP.B   #%1,D7      *if info printed
00001C1A  6700 0332               1250          BEQ     DSEND       *end
00001C1E  43F9 000020F3           1251          LEA     COMMA,A1
00001C24  4E4F                    1252          TRAP    #15
00001C26  60AC                    1253          BRA     DSUBPRNTREG *check d6 for size of data
00001C28                          1254  *then take data from d4 and print (?)
00001C28                          1255  
00001C28  6000 0324               1256          BRA     DSEND
00001C2C                          1257  
00001C2C                          1258  
00001C2C                          1259  
00001C2C  4E71                    1260  DS1010  NOP
00001C2E  6000 031E               1261          BRA     DSEND
00001C32                          1262  
00001C32                          1263          
00001C32                          1264  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00001C32                          1265  
00001C32  4E71                    1266  DS1011  NOP
00001C34  6000 0318               1267          BRA     DSEND
00001C38                          1268          
00001C38                          1269  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00001C38                          1270  
00001C38  4E71                    1271  DS1100  NOP
00001C3A  6000 0312               1272          BRA     DSEND
00001C3E                          1273          
00001C3E                          1274  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00001C3E                          1275  
00001C3E  4E71                    1276  DS1101  NOP
00001C40                          1277  
00001C40  4E71                    1278  DADD    NOP
00001C42  43F9 00002100           1279          LEA     ADDM,A1
00001C48  4E4F                    1280          TRAP    #15
00001C4A                          1281          
00001C4A                          1282          *parse dn reg: 3 bits
00001C4A                          1283  *number of the data register involved
00001C4A                          1284  *nums 0-7, paired with below
00001C4A  E75C                    1285          ROL.W   #3,D4       *dn reg num in d7
00001C4C  1E04                    1286          MOVE.B  D4,D7
00001C4E  0207 0007               1287          ANDI.B  #%111,D7
00001C52                          1288          
00001C52  3C47                    1289          MOVE.W  D7,A6
00001C54                          1290  
00001C54                          1291  *parse opmode: 3 bits
00001C54                          1292  *Dn - <ea> -> Dn: .B=000, .W=001, .L=010
00001C54                          1293  *<ea> - <Dn> -> <ea>: .B=100, .W=101, .L=110
00001C54                          1294  *invalid: 111, 011
00001C54                          1295  *parse first digit separately
00001C54  E35C                    1296          ROL.W   #1,D4       *addressing mode in d2
00001C56  1E04                    1297          MOVE.B  D4,D7
00001C58  0207 0001               1298          ANDI.B  #%1,D7
00001C5C                          1299          
00001C5C                          1300  *parsing next two digits of size
00001C5C  E55C                    1301          ROL.W   #2,D4       *size in d5
00001C5E  1A04                    1302          MOVE.B  D4,D5
00001C60  0205 0003               1303          ANDI.B  #%11,D5
00001C64  BA3C 0003               1304          CMP.B   #%11,D5     *if size is 11, then opcode is ADDA
00001C68  6700 007C               1305          BEQ     DADDA
00001C6C  4EB8 1190               1306          JSR     SIZE
00001C70  43F9 000020C0           1307          LEA     SM7,A1
00001C76  4E4F                    1308          TRAP    #15
00001C78                          1309          
00001C78                          1310  *if addressing mode=<ea>-Dn -> <ea> print ea info first
00001C78  BE3C 0000               1311          CMP.B   #%0,D7       *if 0, then register info printed last
00001C7C  6700 002E               1312          BEQ     DADDEA      *branch to ea before register
00001C80                          1313          
00001C80                          1314  *printing register information
00001C80                          1315  DADDPRNTREG
00001C80  BA3C 0003               1316          CMP.B   #%11,D5
00001C84  6700 0058               1317          BEQ     PRINTA
00001C88  43F9 000020E1           1318          LEA     VALD,A1
00001C8E                          1319  ADDCONT
00001C8E  4E4F                    1320          TRAP    #15
00001C90  320E                    1321          MOVE.W  A6,D1       *moving reg num to d1 to print
00001C92  103C 0003               1322          MOVE.B  #3,D0       *moving 3 to d0 to print register number
00001C96  4E4F                    1323          TRAP    #15         *printing register number
00001C98  103C 000E               1324          MOVE.B  #14,D0      *replacing 14 in d0 to print strings
00001C9C  BE3C 0000               1325          CMP.B   #%0,D7      *if info finished printing
00001CA0  6700 02AC               1326          BEQ     DSEND      *branch to end
00001CA4  43F9 000020F3           1327          LEA     COMMA,A1
00001CAA  4E4F                    1328          TRAP    #15
00001CAC                          1329  
00001CAC                          1330          
00001CAC                          1331  * parse ea mode: 3 bits
00001CAC                          1332  *Dn000, An001, (An)010, (An)+011, -(An)100, (d16An)101, (d8An,Xn)110, data111
00001CAC                          1333  *address reg direct not allowed for .B operations
00001CAC                          1334  *no invalid
00001CAC                          1335  DADDEA
00001CAC  E75C                    1336          ROL.W   #3,D4       *ea mode
00001CAE  1604                    1337          MOVE.B  D4,D3
00001CB0  0203 0007               1338          ANDI.B  #%111,D3
00001CB4                          1339  
00001CB4                          1340  *parse ea reg: 3 bits
00001CB4                          1341  *no invalid: paired with opmode below (nums 0-7)
00001CB4                          1342  *if mode=111, 000=.W, 001=.L, 100=#<data>
00001CB4  E75C                    1343          ROL.W   #3,D4       *ea mode
00001CB6  1C04                    1344          MOVE.B  D4,D6
00001CB8  0206 0007               1345          ANDI.B  #%111,D6
00001CBC                          1346          
00001CBC                          1347  *comparisons
00001CBC  B67C 0004               1348          CMP     #%100,D3
00001CC0  6700 005A               1349          BEQ     ADDDATACHECK
00001CC4                          1350  DATACHECKCONT
00001CC4  4EB8 11DA               1351          JSR     ADDRMODEALL
00001CC8  BE3C 0001               1352          CMP.B   #%1,D7      *if info printed
00001CCC  6700 0280               1353          BEQ     DSEND       *end
00001CD0  43F9 000020F3           1354          LEA     COMMA,A1
00001CD6  4E4F                    1355          TRAP    #15
00001CD8  60A6                    1356          BRA     DADDPRNTREG 
00001CDA                          1357  
00001CDA  6000 0272               1358          BRA     DSEND
00001CDE                          1359          
00001CDE  43F9 000020DF           1360  PRINTA  LEA     VALA,A1
00001CE4  60A8                    1361          BRA     ADDCONT
00001CE6                          1362  
00001CE6                          1363          
00001CE6  4E71                    1364  DADDA   NOP
00001CE8  43F9 000020DF           1365          LEA     VALA,A1
00001CEE  4E4F                    1366          TRAP    #15
00001CF0  BE3C 0000               1367          CMP.B   #%0,D7      *for adda, 0=word, 1=longword
00001CF4  6600 000C               1368          BNE     ADDAL
00001CF8  43F9 000020D9           1369          LEA     MODEW,A1
00001CFE  6000 000C               1370          BRA     ADDSIZEEND
00001D02  43F9 000020DC           1371  ADDAL   LEA     MODEL,A1
00001D08  6000 0002               1372          BRA     ADDSIZEEND
00001D0C                          1373  ADDSIZEEND
00001D0C  4E4F                    1374          TRAP    #15
00001D0E  43F9 000020C0           1375          LEA     SM7,A1
00001D14  4E4F                    1376          TRAP    #15
00001D16  1E3C 0000               1377          MOVE.B  #%0,D7       *set d2 to print adda in correct order: address register always last
00001D1A  6090                    1378          BRA     DADDEA
00001D1C                          1379  ADDDATACHECK
00001D1C  BA3C 0003               1380          CMP.B   #%11,D5
00001D20  6700 0220               1381          BEQ     DSERR
00001D24  609E                    1382          BRA     DATACHECKCONT
00001D26                          1383          
00001D26                          1384          
00001D26                          1385  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00001D26                          1386  
00001D26                          1387  DS1110
00001D26  E75C                    1388          ROL.W   #3,D4           * [D2] Reading count
00001D28  1404                    1389          MOVE.B  D4,D2
00001D2A  0202 0007               1390          ANDI.B  #%111,D2
00001D2E                          1391          
00001D2E  E35C                    1392          ROL.W   #1,D4           * [D3] Reading direction
00001D30  1604                    1393          MOVE.B  D4,D3
00001D32  0203 0001               1394          ANDI.B  #%1,D3
00001D36                          1395          
00001D36  E55C                    1396          ROL.W   #2,D4           * [D5] Reading size
00001D38  1A04                    1397          MOVE.B  D4,D5
00001D3A  0205 0003               1398          ANDI.B  #%11,D5
00001D3E                          1399          
00001D3E  BA3C 0003               1400          CMP.B   #%11,D5   * Start processing code as memory if size is 11
00001D42  6700 00F0               1401          BEQ     DS1110MEM
00001D46                          1402          
00001D46  E35C                    1403          ROL.W   #1,D4           * [D6] Reading count mode
00001D48  1C04                    1404          MOVE.B  D4,D6
00001D4A  0206 0001               1405          ANDI.B  #%1,D6
00001D4E                          1406          
00001D4E  E55C                    1407          ROL.W   #2,D4           * [D7] reading type of shift
00001D50  1E04                    1408          MOVE.B  D4,D7
00001D52  0207 0003               1409          ANDI.B  #%11,D7
00001D56                          1410          
00001D56  E75C                    1411          ROL.W   #3,D4           * [D1] reading register
00001D58  1204                    1412          MOVE.B  D4,D1
00001D5A  0201 0007               1413          ANDI.B  #%111,D1
00001D5E                          1414          
00001D5E  BE3C 0001               1415          CMP.B   #%01,D7   *Determine shift type
00001D62  6700 008E               1416          BEQ     DLS
00001D66  BE3C 0000               1417          CMP.B   #%00,D7
00001D6A  6700 0092               1418          BEQ     DAS
00001D6E  BE3C 0003               1419          CMP.B   #%11,D7
00001D72  6700 0096               1420          BEQ     DRO
00001D76                          1421          
00001D76  6000 01D6               1422          BRA     DSEND               *Fallback in case of invalid code
00001D7A                          1423          
00001D7A  48E7 FFFF               1424  DS1110A MOVEM.L A0-A7/D0-D7,-(SP)   *Print shift direction
00001D7E  4EB9 00001E16           1425          JSR     DS1110SIDE
00001D84  4CDF FFFF               1426          MOVEM.L (SP)+,A0-A7/D0-D7
00001D88                          1427          
00001D88  48E7 FFFF               1428          MOVEM.L A0-A7/D0-D7,-(SP)   *Print size
00001D8C  4EB8 1190               1429          JSR     SIZE
00001D90  4CDF FFFF               1430          MOVEM.L (SP)+,A0-A7/D0-D7
00001D94                          1431          
00001D94  103C 000E               1432          MOVE.B  #14,D0
00001D98  43F9 000020B3           1433          LEA     SM5,A1
00001D9E  4E4F                    1434          TRAP    #15
00001DA0                          1435          
00001DA0  BA3C 0003               1436          CMP.B   #%11,D5
00001DA4  6700 00B4               1437          BEQ     DS1110MEMA
00001DA8                          1438          
00001DA8  BC3C 0001               1439          CMP.B   #%1,D6
00001DAC  6700 003A               1440          BEQ     DS1110_REG_D
00001DB0  6000 002C               1441          BRA     DS1110_REG_I
00001DB4                          1442          
00001DB4  1C01                    1443  DS1110B MOVE.B  D1,D6               *We ned D1 for trap task so since we're done using D6, we put D1 into D6 temporarily
00001DB6                          1444          
00001DB6  103C 0003               1445          MOVE.B  #3,D0
00001DBA  1202                    1446          MOVE.B  D2,D1
00001DBC  4E4F                    1447          TRAP    #15
00001DBE                          1448          
00001DBE  103C 000E               1449          MOVE.B  #14,D0
00001DC2  43F9 000020F3           1450          LEA     COMMA,A1
00001DC8  4E4F                    1451          TRAP    #15
00001DCA                          1452          
00001DCA  43F9 000020E1           1453          LEA     VALD,A1
00001DD0  4E4F                    1454          TRAP    #15
00001DD2                          1455          
00001DD2  103C 0003               1456          MOVE.B  #3,D0
00001DD6  1206                    1457          MOVE.B  D6,D1
00001DD8  4E4F                    1458          TRAP    #15
00001DDA                          1459          
00001DDA  6000 0172               1460          BRA     DSEND
00001DDE                          1461          
00001DDE                          1462  DS1110_REG_I
00001DDE  43F9 000020E3           1463          LEA     VALN,A1
00001DE4  4E4F                    1464          TRAP    #15
00001DE6  60CC                    1465          BRA     DS1110B
00001DE8                          1466  
00001DE8                          1467  DS1110_REG_D
00001DE8  43F9 000020E1           1468          LEA     VALD,A1
00001DEE  4E4F                    1469          TRAP    #15
00001DF0  60C2                    1470          BRA     DS1110B       
00001DF2                          1471          
00001DF2  43F9 00002117           1472  DLS     LEA     LSM,A1
00001DF8  4E4F                    1473          TRAP    #15
00001DFA  6000 FF7E               1474          BRA     DS1110A
00001DFE                          1475          
00001DFE  43F9 0000211E           1476  DAS     LEA     ASM,A1
00001E04  4E4F                    1477          TRAP    #15
00001E06  6000 FF72               1478          BRA     DS1110A
00001E0A                          1479          
00001E0A  43F9 00002125           1480  DRO     LEA     ROM,A1
00001E10  4E4F                    1481          TRAP    #15
00001E12  6000 FF66               1482          BRA     DS1110A
00001E16                          1483          
00001E16                          1484  DS1110SIDE
00001E16  103C 0006               1485          MOVE.B  #6,D0
00001E1A  B63C 0001               1486          CMP.B   #1,D3
00001E1E  6700 000C               1487          BEQ     DS1110LSIDE
00001E22  123C 0052               1488          MOVE.B  #82,D1
00001E26  4E4F                    1489          TRAP    #15
00001E28  6000 0008               1490          BRA     DS1110SIDEEND
00001E2C                          1491  
00001E2C                          1492  DS1110LSIDE
00001E2C  123C 004C               1493          MOVE.B  #76,D1
00001E30  4E4F                    1494          TRAP    #15
00001E32                          1495          
00001E32                          1496  DS1110SIDEEND
00001E32  4E75                    1497          RTS 
00001E34                          1498  
00001E34                          1499  DS1110MEM
00001E34                          1500                                  * Shift type is instead stored in D2
00001E34                          1501          
00001E34  E75C                    1502          ROL.W   #3,D4           * [D6] Reading address mode
00001E36  1C04                    1503          MOVE.B  D4,D6
00001E38  0206 0007               1504          ANDI.B  #%111,D6
00001E3C                          1505          
00001E3C  E75C                    1506          ROL.W   #3,D4           * [D1] Reading address register
00001E3E  1204                    1507          MOVE.B  D4,D1
00001E40  0201 0007               1508          ANDI.B  #%111,D1
00001E44                          1509          
00001E44  B43C 0001               1510          CMP.B   #%01,D2
00001E48  67A8                    1511          BEQ     DLS
00001E4A  B43C 0000               1512          CMP.B   #%00,D2
00001E4E  67AE                    1513          BEQ     DAS
00001E50  B43C 0003               1514          CMP.B   #%11,D2
00001E54  67B4                    1515          BEQ     DRO
00001E56  6000 00F6               1516          BRA     DSEND
00001E5A                          1517          
00001E5A                          1518          
00001E5A                          1519  DS1110MEMA
00001E5A                          1520          
00001E5A  BC3C 0002               1521          CMP.B   #%010,D6
00001E5E  6700 002E               1522          BEQ     DS1110MEM_REG
00001E62  BC3C 0003               1523          CMP.B   #%011,D6
00001E66  6700 004C               1524          BEQ     DS1110MEM_INC
00001E6A  BC3C 0004               1525          CMP.B   #%100,D6
00001E6E  6700 006A               1526          BEQ     DS1110MEM_DEC
00001E72                          1527          
00001E72  BC3C 0007               1528          CMP.B   #%111,D6
00001E76  6600 00CA               1529          BNE     DSERR
00001E7A                          1530          
00001E7A  B23C 0000               1531          CMP.B   #%000,D1
00001E7E  6700 0080               1532          BEQ     DS1110MEM_CUSW
00001E82  B23C 0001               1533          CMP.B   #%001,D1
00001E86  6700 0096               1534          BEQ     DS1110MEM_CUSL
00001E8A                          1535          
00001E8A  6000 00C2               1536          BRA     DSEND
00001E8E                          1537  
00001E8E                          1538  DS1110MEM_REG
00001E8E  43F9 000020E9           1539          LEA     OPENPTR,A1
00001E94  4E4F                    1540          TRAP    #15
00001E96                          1541          
00001E96  43F9 000020DF           1542          LEA     VALA,A1
00001E9C  4E4F                    1543          TRAP    #15
00001E9E                          1544          
00001E9E  103C 0003               1545          MOVE.B  #3,D0
00001EA2  4E4F                    1546          TRAP    #15
00001EA4  103C 000E               1547          MOVE.B  #14,D0
00001EA8                          1548          
00001EA8  43F9 000020EE           1549          LEA     CLOSEPTR,A1
00001EAE  4E4F                    1550          TRAP    #15
00001EB0                          1551          
00001EB0  6000 009C               1552          BRA     DSEND
00001EB4                          1553  
00001EB4                          1554  DS1110MEM_INC
00001EB4  43F9 000020E9           1555          LEA     OPENPTR,A1
00001EBA  4E4F                    1556          TRAP    #15
00001EBC                          1557          
00001EBC  43F9 000020DF           1558          LEA     VALA,A1
00001EC2  4E4F                    1559          TRAP    #15
00001EC4                          1560          
00001EC4  103C 0003               1561          MOVE.B  #3,D0
00001EC8  4E4F                    1562          TRAP    #15
00001ECA  103C 000E               1563          MOVE.B  #14,D0
00001ECE                          1564          
00001ECE  43F9 000020F0           1565          LEA     CLOSEIPTR,A1
00001ED4  4E4F                    1566          TRAP    #15
00001ED6                          1567          
00001ED6  6000 0076               1568          BRA     DSEND
00001EDA                          1569  
00001EDA                          1570  DS1110MEM_DEC
00001EDA  43F9 000020EB           1571          LEA     OPENDPTR,A1
00001EE0  4E4F                    1572          TRAP    #15
00001EE2                          1573          
00001EE2  43F9 000020DF           1574          LEA     VALA,A1
00001EE8  4E4F                    1575          TRAP    #15
00001EEA                          1576          
00001EEA  103C 0003               1577          MOVE.B  #3,D0
00001EEE  4E4F                    1578          TRAP    #15
00001EF0  103C 000E               1579          MOVE.B  #14,D0
00001EF4                          1580          
00001EF4  43F9 000020EE           1581          LEA     CLOSEPTR,A1
00001EFA  4E4F                    1582          TRAP    #15
00001EFC                          1583          
00001EFC  6000 0050               1584          BRA     DSEND
00001F00                          1585          
00001F00                          1586  DS1110MEM_CUSW
00001F00  43F9 000020F5           1587          LEA     DOLLAR,A1
00001F06  4E4F                    1588          TRAP    #15
00001F08  341A                    1589          MOVE.W  (A2)+,D2
00001F0A  48E7 0400               1590          MOVEM.L D5,-(SP)
00001F0E  1A3C 0030               1591          MOVE.B  #48,D5
00001F12  4EB8 1148               1592          JSR     HEXOUT
00001F16  4CDF 0020               1593          MOVEM.L (SP)+,D5
00001F1A  6000 0032               1594          BRA     DSEND
00001F1E                          1595          
00001F1E                          1596  DS1110MEM_CUSL
00001F1E  43F9 000020F5           1597          LEA     DOLLAR,A1
00001F24  4E4F                    1598          TRAP    #15
00001F26  241A                    1599          MOVE.L  (A2)+,D2
00001F28  48E7 0400               1600          MOVEM.L D5,-(SP)
00001F2C  1A3C 0030               1601          MOVE.B  #48,D5
00001F30  4EB8 1148               1602          JSR     HEXOUT
00001F34  4CDF 0020               1603          MOVEM.L (SP)+,D5
00001F38  6000 0014               1604          BRA     DSEND
00001F3C                          1605          
00001F3C                          1606  
00001F3C                          1607  * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
00001F3C                          1608  
00001F3C  4E71                    1609  DS1111  NOP
00001F3E  6000 000E               1610          BRA     DSEND
00001F42                          1611  
00001F42                          1612  *DS Final
00001F42                          1613  *--------------------------------------------------------------------------------------------------
00001F42                          1614  
00001F42  103C 000E               1615  DSERR   MOVE.B  #14,D0
00001F46  43F9 000020CD           1616          LEA     ERRM,A1
00001F4C  4E4F                    1617          TRAP    #15
00001F4E                          1618  
00001F4E  4E75                    1619  DSEND   RTS
00001F50                          1620  
00001F50  103C 0009               1621  END     MOVE.B  #9,D0
00001F54  4E4F                    1622          TRAP    #15
00001F56                          1623  
00001F56                          1624  *Initialized Variables
00001F56                          1625  *--------------------------------------------------------------------------------------------------
00001F56                          1626  
00001F56  =0000000D               1627  CR      EQU     $0D
00001F56  =0000000A               1628  LF      EQU     $0A
00001F56  =00000009               1629  HT      EQU     $09
00001F56                          1630  
00001F56= 54 68 69 73 20 69 ...   1631  INTRO   DC.B    'This is a program that will disassemble machine code stored in memory!',CR,LF,'Inputs are read as hex form of longword size (up to 8 chars)!',CR,LF,0
00001FDE= 45 6E 74 65 72 20 ...   1632  ASTART  DC.B    'Enter start address: $',0
00001FF5= 45 6E 74 65 72 20 ...   1633  AEND    DC.B    'Enter end address:   $',0
0000200C                          1634  
0000200C= 45 52 52 4F 52 3A ...   1635  VERR1M  DC.B    'ERROR: End address must not be less than start address!',CR,LF,0
00002046= 45 52 52 4F 52 3A ...   1636  VERR2M  DC.B    'ERROR: Invalid characters in input!',CR,LF,0
0000206C= 45 52 52 4F 52 3A ...   1637  VERR3M  DC.B    'ERROR: Input cannot be greater than 8 characters!',CR,LF,0
000020A0                          1638  
000020A0= 0D 0A 00                1639  LB      DC.B    CR,LF,0
000020A3                          1640  
000020A3= 09 00                   1641  HTM     DC.B    HT,0
000020A5                          1642  
000020A5= 20 00                   1643  SM1     DC.B    ' ',0
000020A7= 20 20 00                1644  SM2     DC.B    '  ',0
000020AA= 20 20 20 00             1645  SM3     DC.B    '   ',0
000020AE= 20 20 20 20 00          1646  SM4     DC.B    '    ',0
000020B3= 20 20 20 20 20 00       1647  SM5     DC.B    '     ',0
000020B9= 20 20 20 20 20 20 00    1648  SM6     DC.B    '      ',0
000020C0= 20 20 20 20 20 20 ...   1649  SM7     DC.B    '       ',0
000020C8                          1650  
000020C8= 54 45 53 54 00          1651  TESTM   DC.B    'TEST',0
000020CD                          1652  
000020CD= 20 20 2A 45 52 52 ...   1653  ERRM    DC.B    '  *ERROR',0
000020D6                          1654  
000020D6= 2E 42 00                1655  MODEB   DC.B    '.B',0
000020D9= 2E 57 00                1656  MODEW   DC.B    '.W',0
000020DC= 2E 4C 00                1657  MODEL   DC.B    '.L',0
000020DF                          1658  
000020DF= 41 00                   1659  VALA    DC.B    'A',0
000020E1= 44 00                   1660  VALD    DC.B    'D',0
000020E3= 23 00                   1661  VALN    DC.B    '#',0
000020E5= 30 00                   1662  VAL0    DC.B    '0',0
000020E7= 51 00                   1663  VALQ    DC.B    'Q',0
000020E9                          1664  
000020E9= 28 00                   1665  OPENPTR     DC.B    '(',0
000020EB= 2D 28 00                1666  OPENDPTR    DC.B    '-(',0
000020EE                          1667  
000020EE= 29 00                   1668  CLOSEPTR    DC.B    ')',0
000020F0= 29 2B 00                1669  CLOSEIPTR   DC.B    ')+',0
000020F3                          1670  
000020F3= 2C 00                   1671  COMMA   DC.B    ',',0
000020F5= 24 00                   1672  DOLLAR  DC.B    '$',0
000020F7                          1673  
000020F7= 4E 4F 50 00             1674  NOPM    DC.B    'NOP',0
000020FB                          1675  
000020FB= 4D 4F 56 45 00          1676  MOVEM   DC.B    'MOVE',0
00002100                          1677  
00002100= 41 44 44 00             1678  ADDM    DC.B    'ADD',0
00002104                          1679  
00002104= 53 55 42 00             1680  SUBM    DC.B    'SUB',0
00002108                          1681  
00002108= 4C 45 41 00             1682  LEAM    DC.B    'LEA',0
0000210C                          1683  
0000210C= 41 4E 44 00             1684  ANDM    DC.B    'AND',0
00002110= 4F 52 00                1685  ORM     DC.B    'OR',0
00002113= 4E 4F 54 00             1686  NOTM    DC.B    'NOT',0
00002117                          1687  
00002117= 4C 53 00                1688  LSM    DC.B    'LS',0
0000211A= 4C 53 52 00             1689  LSRM    DC.B    'LSR',0
0000211E= 41 53 00                1690  ASM    DC.B    'AS',0
00002121= 41 53 52 00             1691  ASRM    DC.B    'ASR',0
00002125                          1692  
00002125= 52 4F 00                1693  ROM    DC.B    'RO',0
00002128= 52 4F 52 00             1694  RORM    DC.B    'ROR',0
0000212C                          1695  
0000212C= 42 47 54 00             1696  BGTM    DC.B    'BGT',0
00002130= 42 4C 45 00             1697  BLEM    DC.B    'BLE',0
00002134= 42 45 51 00             1698  BEQM    DC.B    'BEQ',0
00002138                          1699  
00002138= 4A 53 52 00             1700  JSRM    DC.B    'JSR',0
0000213C= 52 54 53 00             1701  RTSM    DC.B    'RTS',0
00002140                          1702  
00002140= 42 52 41 00             1703  BRAM    DC.B    'BRA',0
00002144                          1704  
00002144                          1705  
00002144                          1706      END    START        ; last line of so

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDAL               1D02
ADDCONT             1C8E
ADDDATACHECK        1D1C
ADDM                2100
ADDRMODEALL         11DA
ADDSIZEEND          1D0C
ADREG               164A
ADREGP              1662
AEND                1FF5
AM000               11DA
AM001               11FA
AM010               1222
AM011               1252
AM100               1282
AM111               12B2
AM111001            12E0
AM111100            1306
AMEND               1334
ANDM                210C
ASM                 211E
ASRM                2121
ASTART              1FDE
BEQM                2134
BGTM                212C
BLEM                2130
BRAM                2140
CLOSEIPTR           20F0
CLOSEPTR            20EE
COMMA               20F3
CR                  D
DADD                1C40
DADDA               1CE6
DADDEA              1CAC
DADDPRNTREG         1C80
DADDQ               1874
DAND                136C
DANDA               13E4
DANDB               13A8
DANDL               13D0
DANDW               13BC
DAS                 1DFE
DATACHECKCONT       1CC4
DBEQ                1A20
DBGT                19A4
DBLE                19E0
DBRA                1918
DBRA_16BIT          1960
DBRA_32BIT          1982
DISASM              133A
DJSR                16CC
DJSR_CUSL           1764
DJSR_CUSW           1746
DJSR_REG            1720
DLEA                178E
DLS                 1DF2
DMOVE2              1436
DMOVEA              14DA
DMOVEQ              1A62
DNOP                1590
DNOT                159C
DNOTA               15FC
DNOTB               15C0
DNOTL               15E8
DNOTW               15D4
DOLLAR              20F5
DOR                 1AD0
DORA                1B48
DORB                1B0C
DORL                1B34
DORW                1B20
DREG                1632
DRO                 1E0A
DRTS                1782
DS0                 1344
DS00                1358
DS01                14FC
DS010               151A
DS0100              1556
DS0101              1872
DS011               1524
DS0110              18EC
DS0111              1A60
DS1                 134E
DS10                1506
DS100               152E
DS1000              1ACA
DS1001              1B9A
DS101               1538
DS1010              1C2C
DS1011              1C32
DS11                1510
DS110               1542
DS1100              1C38
DS1101              1C3E
DS111               154C
DS1110              1D26
DS1110A             1D7A
DS1110B             1DB4
DS1110LSIDE         1E2C
DS1110MEM           1E34
DS1110MEMA          1E5A
DS1110MEM_CUSL      1F1E
DS1110MEM_CUSW      1F00
DS1110MEM_DEC       1EDA
DS1110MEM_INC       1EB4
DS1110MEM_REG       1E8E
DS1110SIDE          1E16
DS1110SIDEEND       1E32
DS1110_REG_D        1DE8
DS1110_REG_I        1DDE
DS1111              1F3C
DSEND               1F4E
DSERR               1F42
DSUB                1B9C
DSUBEA              1BF8
DSUBPRNTREG         1BD4
END                 1F50
ERRM                20CD
EXT                 16AA
EXTW                16C0
HDONE               118E
HEXOUT              1148
HHEX                1162
HNUM                116A
HSKIP2              1178
HSKIP3              118C
HSTEP               1150
HSTEP2              116E
HT                  9
HTM                 20A3
INTRO               1F56
JSR010              17C6
JSR111              17F6
JSR111001           1828
JSRM                2138
JSRPRINT2           1852
LB                  20A0
LEAM                2108
LF                  A
LSM                 2117
LSRM                211A
MADREG              1682
MODEB               20D6
MODEL               20DC
MODEW               20D9
MOVECONT            145A
MOVEERRCHECK        14F0
MOVEM               20FB
MSDONE              14A0
MSIZE               145A
MSIZEB              1482
MSIZEL              1496
MSIZEW              148C
NOPM                20F7
NOTM                2113
OPENDPTR            20EB
OPENPTR             20E9
ORM                 2110
PARSE               1054
PCAPS               1080
PDONE               10AA
PHEX                1070
PNUM                1088
PRINTA              1CDE
PSTEP               105C
PSTEP2              108C
RCONT               1134
READLN              10E6
ROM                 2125
RORM                2128
RPAUSE              113C
RSTEP               10EC
RTSM                213C
SDONE               11D6
SIZE                1190
SIZEB               11B8
SIZEL               11CC
SIZEW               11C2
SM1                 20A5
SM2                 20A7
SM3                 20AA
SM4                 20AE
SM5                 20B3
SM6                 20B9
SM7                 20C0
SRET                11D8
START               1000
STARTER             0
SUBM                2104
TEST                1004
TESTM               20C8
VAL0                20E5
VALA                20DF
VALD                20E1
VALN                20E3
VALQ                20E7
VERR1               10B6
VERR1M              200C
VERR2               10C6
VERR2M              2046
VERR3               10D6
VERR3M              206C
VINPUT              10AC
