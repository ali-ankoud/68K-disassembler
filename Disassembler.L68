00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/17/2023 8:56:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler Snippet
00000000                             3  * Written by : Ben Schipunov (ARM Cortex Companions)
00000000                             4  * Date       : 5/15/2023
00000000                             5  * Description: Ben Schipunov contribution to the disassembler
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  STARTER
00001000                             9          ORG     $1000
00001000                            10          
00001000  43F9 00001102             11  START   LEA     ASTART,A1
00001006  103C 000E                 12          MOVE.B  #14,D0
0000100A  4E4F                      13          TRAP    #15
0000100C                            14  
0000100C  103C 0002                 15          MOVE.B  #2,D0
00001010  4E4F                      16          TRAP    #15
00001012                            17          
00001012  4EB9 00001038             18          JSR     PSTART
00001018  2641                      19          MOVE.L  D1,A3
0000101A                            20          
0000101A  43F9 00001119             21          LEA     AEND,A1
00001020  103C 000E                 22          MOVE.B  #14,D0
00001024  4E4F                      23          TRAP    #15
00001026                            24          
00001026  103C 0002                 25          MOVE.B  #2,D0
0000102A  4E4F                      26          TRAP    #15
0000102C                            27          
0000102C  4EB9 00001038             28          JSR     PSTART
00001032  2841                      29          MOVE.L  D1,A4
00001034                            30          
00001034  6000 0072                 31          BRA     END
00001038                            32          
00001038                            33  
00001038                            34  PSTART                      *PSTART: Initialize variables involved in parsing
00001038  123C 0000                 35          MOVE.B  #0,D1       * [D1] parse output
0000103C  143C 0008                 36          MOVE.B  #8,D2       * [D2] max letter counter (size of longword)
00001040                            37          
00001040                            38  PSTEP                       *PSTEP: Step in parsing for loop
00001040  1019                      39          MOVE.B  (A1)+,D0    *Read next byte from A1
00001042  B03C 0000                 40          CMP.B   #0,D0       *Check if reached end of string input
00001046  6700 004A                 41          BEQ     PDONE       *Break the for loop if reached end
0000104A  E989                      42          LSL.L   #4,D1       *Logical shift left by 4 bits to insert next hex character
0000104C  B03C 003A                 43          CMP.B   #58,D0      *Distinguish between letter and number
00001050  6D00 001E                 44          BLT     PNUM        *Handle number
00001054  6000 0002                 45          BRA     PHEX        *Handle hex letter
00001058                            46  
00001058  0400 0037                 47  PHEX    SUB.B   #55,D0      *ASCII value subtracted by 55 to match hex value
0000105C  B03C 000F                 48          CMP.B   #15,D0
00001060  6E00 0006                 49          BGT     PCAPS
00001064  6000 000E                 50          BRA     PSTEP2
00001068                            51       
00001068  0400 0020                 52  PCAPS   SUB.B   #32,D0
0000106C  6000 0006                 53          BRA     PSTEP2
00001070                            54  
00001070  0400 0030                 55  PNUM    SUB.B   #48,D0      *ASCII value subtracted by 48 to match hex value
00001074                            56          
00001074  B03C 000F                 57  PSTEP2  CMP.B   #15,D0      *If D0 is not in between 0 and 15 inclusively, throw an error
00001078  6E00 001E                 58          BGT     VERR2
0000107C  B03C 0000                 59          CMP.B   #0,D0
00001080  6D00 0016                 60          BLT     VERR2
00001084  D280                      61          ADD.L   D0,D1       *Append hex char to parse output
00001086  5302                      62          SUBQ.B  #1,D2       *Decrement the counter
00001088  B43C 0000                 63          CMP.B   #0,D2       *Compare if we reached max count
0000108C  6700 0004                 64          BEQ     PDONE       *Complete parsing
00001090  60AE                      65          BRA     PSTEP       *Or else continue loop
00001092                            66  
00001092  4E75                      67  PDONE   RTS
00001094                            68  
00001094  103C 0000                 69  VINPUT  MOVE.B  #0,D0       *Temporary line to allow compiling
00001098                            70  
00001098  43F9 00001168             71  VERR2   LEA     VERR2M,A1
0000109E  103C 000E                 72          MOVE.B  #14,D0
000010A2  4E4F                      73          TRAP    #15
000010A4                            74  
000010A4                            75  
000010A4  103C 0000                 76  PROC    MOVE.B  #0,D0       *Temporary line to allow compiling
000010A8                            77  
000010A8                            78  
000010A8  103C 0009                 79  END     MOVE.B  #9,D0
000010AC  4E4F                      80          TRAP    #15
000010AE                            81  
000010AE  =0000000D                 82  CR      EQU     $0D
000010AE  =0000000A                 83  LF      EQU     $0A
000010AE                            84  
000010AE= 54 68 69 73 20 69 ...     85  INTRO   DC.B    'This is a program that will disassemble machine code from a start to an end address!'
00001102= 45 6E 74 65 72 20 ...     86  ASTART  DC.B    'Enter start address: $',0
00001119= 45 6E 74 65 72 20 ...     87  AEND    DC.B    'Enter end address:   $',0
00001130                            88  
00001130= 45 52 52 4F 52 3A ...     89  VERR1M DC.B    'ERROR: End address must be greater than start address',CR,LF,0
00001168= 45 52 52 4F 52 3A ...     90  VERR2M DC.B    'ERROR: Invalid input',CR,LF,0
0000117F                            91  
0000117F                            92      END    START        ; last line of so

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AEND                1119
ASTART              1102
CR                  D
END                 10A8
INTRO               10AE
LF                  A
PCAPS               1068
PDONE               1092
PHEX                1058
PNUM                1070
PROC                10A4
PSTART              1038
PSTEP               1040
PSTEP2              1074
START               1000
STARTER             0
VERR1M              1130
VERR2               1098
VERR2M              1168
VINPUT              1094
